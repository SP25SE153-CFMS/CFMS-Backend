// <auto-generated />
using System;
using CFMS.Domain.Entities;
using CFMS.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CFMS.Domain.Migrations
{
    [DbContext(typeof(CfmsDbContext))]
    [Migration("20250208225840_AddUserLogRelationsV2")]
    partial class AddUserLogRelationsV2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CFMS.Domain.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Assignmentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("assignmentid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("Assigneddate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("assigneddate")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("Completeddate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("completeddate");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<Guid>("Taskid")
                        .HasColumnType("uuid")
                        .HasColumnName("taskid");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("Assignmentid")
                        .HasName("assignment_pkey");

                    b.HasIndex("Taskid");

                    b.HasIndex("Userid");

                    b.ToTable("assignment", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Breadingarea", b =>
                {
                    b.Property<Guid>("Breadingareaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("breadingareaid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal?>("Area")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("area");

                    b.Property<string>("Breadingareacode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("breadingareacode");

                    b.Property<string>("Breadingareaname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("breadingareaname");

                    b.Property<string>("Breadingpurpose")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("breadingpurpose");

                    b.Property<bool?>("Covered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("covered");

                    b.Property<Guid>("Farmid")
                        .HasColumnType("uuid")
                        .HasColumnName("farmid");

                    b.Property<decimal?>("Humidity")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("humidity");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<int?>("Mealsperday")
                        .HasColumnType("integer")
                        .HasColumnName("mealsperday");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<decimal?>("Temperature")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("temperature");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("weight");

                    b.HasKey("Breadingareaid")
                        .HasName("breadingarea_pkey");

                    b.HasIndex("Farmid");

                    b.HasIndex(new[] { "Breadingareacode" }, "breadingarea_breadingareacode_key")
                        .IsUnique();

                    b.ToTable("breadingarea", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Breadingequipment", b =>
                {
                    b.Property<Guid>("Breadingequipmentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("breadingequipmentid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("Assigneddate")
                        .HasColumnType("date")
                        .HasColumnName("assigneddate");

                    b.Property<Guid>("Breadingareaid")
                        .HasColumnType("uuid")
                        .HasColumnName("breadingareaid");

                    b.Property<Guid>("Equipmentid")
                        .HasColumnType("uuid")
                        .HasColumnName("equipmentid");

                    b.Property<DateOnly?>("Maintaindate")
                        .HasColumnType("date")
                        .HasColumnName("maintaindate");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("Breadingequipmentid")
                        .HasName("breadingequipment_pkey");

                    b.HasIndex("Breadingareaid");

                    b.HasIndex("Equipmentid");

                    b.ToTable("breadingequipment", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Breed", b =>
                {
                    b.Property<Guid>("Breedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("breedid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Img")
                        .HasColumnType("text")
                        .HasColumnName("img");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Breedid")
                        .HasName("breed_pkey");

                    b.ToTable("breed", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Chickenbatch", b =>
                {
                    b.Property<Guid>("Chickenbatchid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("chickenbatchid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("Breadingareaid")
                        .HasColumnType("uuid")
                        .HasColumnName("breadingareaid");

                    b.Property<DateOnly?>("Enddate")
                        .HasColumnType("date")
                        .HasColumnName("enddate");

                    b.Property<Guid>("Flockid")
                        .HasColumnType("uuid")
                        .HasColumnName("flockid");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("Numberofchicken")
                        .HasColumnType("integer")
                        .HasColumnName("numberofchicken");

                    b.Property<DateOnly>("Startdate")
                        .HasColumnType("date")
                        .HasColumnName("startdate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("Chickenbatchid")
                        .HasName("chickenbatch_pkey");

                    b.HasIndex("Breadingareaid");

                    b.HasIndex("Flockid");

                    b.ToTable("chickenbatch", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Dailytask", b =>
                {
                    b.Property<Guid>("Dtaskid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("dtaskid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<DateOnly>("Taskdate")
                        .HasColumnType("date")
                        .HasColumnName("taskdate");

                    b.Property<Guid>("Taskid")
                        .HasColumnType("uuid")
                        .HasColumnName("taskid");

                    b.HasKey("Dtaskid")
                        .HasName("dailytask_pkey");

                    b.HasIndex("Taskid");

                    b.ToTable("dailytask", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Disease", b =>
                {
                    b.Property<Guid>("Diseaseid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("diseaseid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Cause")
                        .HasColumnType("text")
                        .HasColumnName("cause");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Diseasetype")
                        .HasColumnType("text")
                        .HasColumnName("diseasetype");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Diseaseid")
                        .HasName("disease_pkey");

                    b.ToTable("disease", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Equipment", b =>
                {
                    b.Property<Guid>("Equipmentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("equipmentid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal?>("Cost")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("cost");

                    b.Property<string>("Equipmentname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("equipmentname");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<DateOnly>("Purchasedate")
                        .HasColumnType("date")
                        .HasColumnName("purchasedate");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.Property<TimeSpan?>("Warrantyperiod")
                        .HasColumnType("interval")
                        .HasColumnName("warrantyperiod");

                    b.HasKey("Equipmentid")
                        .HasName("equipment_pkey");

                    b.ToTable("equipment", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Expireddamaged", b =>
                {
                    b.Property<Guid>("Edproductid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("edproductid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Actiontaken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actiontaken");

                    b.Property<Guid>("Productid")
                        .HasColumnType("uuid")
                        .HasColumnName("productid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<DateTime>("Recorddate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("recorddate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Edproductid")
                        .HasName("expireddamaged_pkey");

                    b.HasIndex("Productid");

                    b.ToTable("expireddamaged", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Exportedproduct", b =>
                {
                    b.Property<Guid>("Eproductid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("eproductid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("Chickenbatchid")
                        .HasColumnType("uuid")
                        .HasColumnName("chickenbatchid");

                    b.Property<DateOnly?>("Expireddate")
                        .HasColumnType("date")
                        .HasColumnName("expireddate");

                    b.Property<DateOnly>("Exporteddate")
                        .HasColumnType("date")
                        .HasColumnName("exporteddate");

                    b.Property<Guid>("Farmid")
                        .HasColumnType("uuid")
                        .HasColumnName("farmid");

                    b.Property<string>("Productcode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("productcode");

                    b.Property<Guid>("Productid")
                        .HasColumnType("uuid")
                        .HasColumnName("productid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("Storagelocation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("storagelocation");

                    b.HasKey("Eproductid")
                        .HasName("exportedproduct_pkey");

                    b.HasIndex("Chickenbatchid");

                    b.HasIndex("Farmid");

                    b.HasIndex("Productid");

                    b.HasIndex(new[] { "Productcode" }, "exportedproduct_productcode_key")
                        .IsUnique();

                    b.ToTable("exportedproduct", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Farm", b =>
                {
                    b.Property<Guid>("Farmid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("farmid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<decimal?>("Area")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("area");

                    b.Property<string>("Farmcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("farmcode");

                    b.Property<string>("Farmimage")
                        .HasColumnType("text")
                        .HasColumnName("farmimage");

                    b.Property<string>("Farmname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("farmname");

                    b.Property<string>("Phonenumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phonenumber");

                    b.Property<string>("Scale")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("scale");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("website");

                    b.HasKey("Farmid")
                        .HasName("farm_pkey");

                    b.HasIndex("Userid");

                    b.HasIndex(new[] { "Farmcode" }, "farm_farmcode_key")
                        .IsUnique();

                    b.ToTable("farm", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Feedschedule", b =>
                {
                    b.Property<Guid>("Feedscheduleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("feedscheduleid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("Feedamount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("feedamount");

                    b.Property<TimeOnly>("Feedtime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("feedtime");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.HasKey("Feedscheduleid")
                        .HasName("feedschedule_pkey");

                    b.ToTable("feedschedule", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Flock", b =>
                {
                    b.Property<Guid>("Flockid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("flockid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("Breedid")
                        .HasColumnType("uuid")
                        .HasColumnName("breedid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("Enddate")
                        .HasColumnType("date")
                        .HasColumnName("enddate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("Purposeid")
                        .HasColumnType("uuid")
                        .HasColumnName("purposeid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateOnly>("Startdate")
                        .HasColumnType("date")
                        .HasColumnName("startdate");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Flockid")
                        .HasName("flock_pkey");

                    b.HasIndex("Breedid");

                    b.HasIndex("Purposeid");

                    b.ToTable("flock", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Food", b =>
                {
                    b.Property<Guid>("Foodid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("foodid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("Expirydate")
                        .HasColumnType("date")
                        .HasColumnName("expirydate");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ingredients");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("Supplierid")
                        .HasColumnType("uuid")
                        .HasColumnName("supplierid");

                    b.Property<string>("Usage")
                        .HasColumnType("text")
                        .HasColumnName("usage");

                    b.HasKey("Foodid")
                        .HasName("food_pkey");

                    b.HasIndex("Supplierid");

                    b.ToTable("food", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Harvesttask", b =>
                {
                    b.Property<Guid>("Htaskid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("htaskid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Damagedquantity")
                        .HasColumnType("integer")
                        .HasColumnName("damagedquantity");

                    b.Property<int>("Goodquantity")
                        .HasColumnType("integer")
                        .HasColumnName("goodquantity");

                    b.Property<DateOnly>("Harvestdate")
                        .HasColumnType("date")
                        .HasColumnName("harvestdate");

                    b.Property<string>("Harvesttype")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("harvesttype");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<Guid>("Taskid")
                        .HasColumnType("uuid")
                        .HasColumnName("taskid");

                    b.Property<int>("Totalquantity")
                        .HasColumnType("integer")
                        .HasColumnName("totalquantity");

                    b.HasKey("Htaskid")
                        .HasName("harvesttask_pkey");

                    b.HasIndex("Taskid");

                    b.ToTable("harvesttask", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Healthcriterion", b =>
                {
                    b.Property<Guid>("Criteriaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("criteriaid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Characteristic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("characteristic");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("unit");

                    b.HasKey("Criteriaid")
                        .HasName("healthcriteria_pkey");

                    b.ToTable("healthcriteria", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Healthlog", b =>
                {
                    b.Property<Guid>("Hlogid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("hlogid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("Flockid")
                        .HasColumnType("uuid")
                        .HasColumnName("flockid");

                    b.Property<DateTime>("Logdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("logdate");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.HasKey("Hlogid")
                        .HasName("healthlog_pkey");

                    b.HasIndex("Flockid");

                    b.ToTable("healthlog", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Inventoryaudit", b =>
                {
                    b.Property<Guid>("Auditid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("auditid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Actualquantity")
                        .HasColumnType("integer")
                        .HasColumnName("actualquantity");

                    b.Property<DateTime>("Auditdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("auditdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("condition");

                    b.Property<Guid>("Productid")
                        .HasColumnType("uuid")
                        .HasColumnName("productid");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<int>("Systemquantity")
                        .HasColumnType("integer")
                        .HasColumnName("systemquantity");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("Auditid")
                        .HasName("inventoryaudit_pkey");

                    b.HasIndex("Productid");

                    b.HasIndex("Userid");

                    b.ToTable("inventoryaudit", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Nutrition", b =>
                {
                    b.Property<Guid>("Nutritionid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("nutritionid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Developmentstage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("developmentstage");

                    b.Property<Guid>("Feedscheduleid")
                        .HasColumnType("uuid")
                        .HasColumnName("feedscheduleid");

                    b.Property<Guid>("Flockid")
                        .HasColumnType("uuid")
                        .HasColumnName("flockid");

                    b.Property<Guid>("Foodid")
                        .HasColumnType("uuid")
                        .HasColumnName("foodid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Targetaudience")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("targetaudience");

                    b.Property<Guid>("Waterid")
                        .HasColumnType("uuid")
                        .HasColumnName("waterid");

                    b.HasKey("Nutritionid")
                        .HasName("nutrition_pkey");

                    b.HasIndex("Feedscheduleid");

                    b.HasIndex("Flockid");

                    b.HasIndex("Foodid");

                    b.HasIndex("Waterid");

                    b.ToTable("nutrition", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Performancestatistic", b =>
                {
                    b.Property<Guid>("Perstaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("perstaid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int?>("Completedtask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("completedtask");

                    b.Property<decimal?>("Completionrate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("completionrate")
                        .HasComputedColumnSql("\nCASE\n    WHEN (totaltask > 0) THEN (((completedtask)::numeric * 100.0) / (totaltask)::numeric)\n    ELSE (0)::numeric\nEND", true);

                    b.Property<int?>("Delaytask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("delaytask");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("Performancerating")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("performancerating");

                    b.Property<DateOnly>("Rangetime")
                        .HasColumnType("date")
                        .HasColumnName("rangetime");

                    b.Property<int?>("Totaltask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("totaltask");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("Perstaid")
                        .HasName("performancestatistic_pkey");

                    b.HasIndex("Userid");

                    b.ToTable("performancestatistic", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Productid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("productid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int?>("Maxstock")
                        .HasColumnType("integer")
                        .HasColumnName("maxstock");

                    b.Property<int?>("Minstock")
                        .HasColumnType("integer")
                        .HasColumnName("minstock");

                    b.Property<string>("Productcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("productcode");

                    b.Property<string>("Productname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("productname");

                    b.Property<string>("Storagelocation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("storagelocation");

                    b.Property<Guid>("Supplierid")
                        .HasColumnType("uuid")
                        .HasColumnName("supplierid");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("unit");

                    b.HasKey("Productid")
                        .HasName("product_pkey");

                    b.HasIndex("Supplierid");

                    b.HasIndex(new[] { "Productcode" }, "product_productcode_key")
                        .IsUnique();

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Purpose", b =>
                {
                    b.Property<Guid>("Purposeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("purposeid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Purposeid")
                        .HasName("purpose_pkey");

                    b.ToTable("purpose", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Quantitylog", b =>
                {
                    b.Property<Guid>("Qlogid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("qlogid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("Flockid")
                        .HasColumnType("uuid")
                        .HasColumnName("flockid");

                    b.Property<DateTime>("Logdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("logdate");

                    b.Property<string>("Logtype")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("logtype");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("Reasonid")
                        .HasColumnType("uuid")
                        .HasColumnName("reasonid");

                    b.HasKey("Qlogid")
                        .HasName("quantitylog_pkey");

                    b.HasIndex("Flockid");

                    b.HasIndex("Reasonid");

                    b.ToTable("quantitylog", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Reason", b =>
                {
                    b.Property<Guid>("Reasonid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("reasonid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Reasonid")
                        .HasName("reason_pkey");

                    b.ToTable("reason", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Roleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("roleid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("permission");

                    b.Property<string>("Rolename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("rolename");

                    b.HasKey("Roleid")
                        .HasName("roles_pkey");

                    b.HasIndex(new[] { "Rolename" }, "roles_rolename_key")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Salary", b =>
                {
                    b.Property<Guid>("Salaryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("salaryid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("Basicsalary")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("basicsalary");

                    b.Property<decimal?>("Bonus")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("bonus")
                        .HasDefaultValueSql("0");

                    b.Property<decimal?>("Deduction")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("deduction")
                        .HasDefaultValueSql("0");

                    b.Property<decimal?>("Finalsalary")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("finalsalary")
                        .HasComputedColumnSql("((basicsalary + bonus) - deduction)", true);

                    b.Property<decimal?>("Overtimehours")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("overtimehours")
                        .HasDefaultValueSql("0");

                    b.Property<DateOnly>("Salarymonth")
                        .HasColumnType("date")
                        .HasColumnName("salarymonth");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<decimal?>("Totalhoursworked")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("totalhoursworked")
                        .HasDefaultValueSql("0");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("Salaryid")
                        .HasName("salary_pkey");

                    b.HasIndex("Userid");

                    b.ToTable("salary", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Supplierid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("supplierid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Contactinformation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contactinformation");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Supplierid")
                        .HasName("supplier_pkey");

                    b.ToTable("supplier", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Task", b =>
                {
                    b.Property<Guid>("Taskid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("taskid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("Createddate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Duedate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("duedate");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("location");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Taskname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("taskname");

                    b.Property<string>("Tasktype")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tasktype");

                    b.Property<Guid?>("Userid")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("Taskid")
                        .HasName("task_pkey");

                    b.HasIndex("Userid");

                    b.ToTable("task", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TimeKeeping", b =>
                {
                    b.Property<Guid>("Timekeepingid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("timekeepingid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<TimeOnly>("Endtime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("endtime");

                    b.Property<Guid>("Timekeepingtype")
                        .HasColumnType("uuid")
                        .HasColumnName("timekeepingtype");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.Property<DateOnly>("Workdate")
                        .HasColumnType("date")
                        .HasColumnName("workdate");

                    b.HasKey("Timekeepingid")
                        .HasName("time_keeping_pkey");

                    b.HasIndex("Timekeepingtype");

                    b.HasIndex("Userid");

                    b.ToTable("time_keeping", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TimeKeepingType", b =>
                {
                    b.Property<Guid>("Timetypeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("timetypeid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Typename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("typename");

                    b.Property<decimal>("Unitsalary")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("unitsalary");

                    b.HasKey("Timetypeid")
                        .HasName("time_keeping_types_pkey");

                    b.HasIndex(new[] { "Typename" }, "time_keeping_types_typename_key")
                        .IsUnique();

                    b.ToTable("time_keeping_types", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("userid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Cccd")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("cccd");

                    b.Property<DateOnly>("Dateofbirth")
                        .HasColumnType("date")
                        .HasColumnName("dateofbirth");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("fullname");

                    b.Property<Guid?>("Roleid")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.Property<DateOnly>("Startdate")
                        .HasColumnType("date")
                        .HasColumnName("startdate");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.HasKey("Userid")
                        .HasName("users_pkey");

                    b.HasIndex("Roleid");

                    b.HasIndex(new[] { "Cccd" }, "users_cccd_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Vaccinationlog", b =>
                {
                    b.Property<Guid>("Vlogid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("vlogid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("Dosage")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("dosage");

                    b.Property<Guid>("Flockid")
                        .HasColumnType("uuid")
                        .HasColumnName("flockid");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("status");

                    b.Property<DateTime>("Vaccinationdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("vaccinationdate");

                    b.Property<Guid>("Vaccineid")
                        .HasColumnType("uuid")
                        .HasColumnName("vaccineid");

                    b.HasKey("Vlogid")
                        .HasName("vaccinationlog_pkey");

                    b.HasIndex("Flockid");

                    b.HasIndex("Vaccineid");

                    b.ToTable("vaccinationlog", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Vaccine", b =>
                {
                    b.Property<Guid>("Vaccineid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("vaccineid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Batchnumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("batchnumber");

                    b.Property<Guid>("Diseaseid")
                        .HasColumnType("uuid")
                        .HasColumnName("diseaseid");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dosage");

                    b.Property<DateOnly>("Expirydate")
                        .HasColumnType("date")
                        .HasColumnName("expirydate");

                    b.Property<string>("Instructions")
                        .HasColumnType("text")
                        .HasColumnName("instructions");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateOnly>("Productiondate")
                        .HasColumnType("date")
                        .HasColumnName("productiondate");

                    b.Property<Guid>("Supplierid")
                        .HasColumnType("uuid")
                        .HasColumnName("supplierid");

                    b.HasKey("Vaccineid")
                        .HasName("vaccine_pkey");

                    b.HasIndex("Diseaseid");

                    b.HasIndex("Supplierid");

                    b.ToTable("vaccine", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Water", b =>
                {
                    b.Property<Guid>("Waterid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("waterid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("Expirydate")
                        .HasColumnType("date")
                        .HasColumnName("expirydate");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ingredients");

                    b.Property<string>("Instructions")
                        .HasColumnType("text")
                        .HasColumnName("instructions");

                    b.Property<string>("Mixingratio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mixingratio");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("Supplierid")
                        .HasColumnType("uuid")
                        .HasColumnName("supplierid");

                    b.Property<string>("Targetaudience")
                        .HasColumnType("text")
                        .HasColumnName("targetaudience");

                    b.Property<string>("Usage")
                        .HasColumnType("text")
                        .HasColumnName("usage");

                    b.HasKey("Waterid")
                        .HasName("water_pkey");

                    b.HasIndex("Supplierid");

                    b.ToTable("water", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Workschedule", b =>
                {
                    b.Property<Guid>("Workscheduleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("workscheduleid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Colorcode")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("colorcode");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<Guid>("Taskid")
                        .HasColumnType("uuid")
                        .HasColumnName("taskid");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.Property<DateOnly>("Workdate")
                        .HasColumnType("date")
                        .HasColumnName("workdate");

                    b.HasKey("Workscheduleid")
                        .HasName("workschedule_pkey");

                    b.HasIndex("Taskid");

                    b.HasIndex("Userid");

                    b.ToTable("workschedule", (string)null);
                });

            modelBuilder.Entity("UserHealthLog", b =>
                {
                    b.Property<Guid>("hLogId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("hLogId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("user_health_log", (string)null);
                });

            modelBuilder.Entity("UserQuantityLog", b =>
                {
                    b.Property<Guid>("qLogId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("qLogId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("user_quantity_log", (string)null);
                });

            modelBuilder.Entity("UserVaccineLog", b =>
                {
                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("vLogId")
                        .HasColumnType("uuid");

                    b.HasKey("userId", "vLogId");

                    b.HasIndex("vLogId");

                    b.ToTable("user_vaccine_log", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Assignment", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Task", "Task")
                        .WithMany("Assignments")
                        .HasForeignKey("Taskid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("assignment_taskid_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("Assignments")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("assignment_userid_fkey");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Breadingarea", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Farm", "Farm")
                        .WithMany("Breadingareas")
                        .HasForeignKey("Farmid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("breadingarea_farmid_fkey");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Breadingequipment", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Breadingarea", "Breadingarea")
                        .WithMany("Breadingequipments")
                        .HasForeignKey("Breadingareaid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("breadingequipment_breadingareaid_fkey");

                    b.HasOne("CFMS.Domain.Entities.Equipment", "Equipment")
                        .WithMany("Breadingequipments")
                        .HasForeignKey("Equipmentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("breadingequipment_equipmentid_fkey");

                    b.Navigation("Breadingarea");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Chickenbatch", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Breadingarea", "Breadingarea")
                        .WithMany("Chickenbatches")
                        .HasForeignKey("Breadingareaid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chickenbatch_breadingareaid_fkey");

                    b.HasOne("CFMS.Domain.Entities.Flock", "Flock")
                        .WithMany("Chickenbatches")
                        .HasForeignKey("Flockid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chickenbatch_flockid_fkey");

                    b.Navigation("Breadingarea");

                    b.Navigation("Flock");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Dailytask", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Task", "Task")
                        .WithMany("Dailytasks")
                        .HasForeignKey("Taskid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("dailytask_taskid_fkey");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Expireddamaged", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Product", "Product")
                        .WithMany("Expireddamageds")
                        .HasForeignKey("Productid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("expireddamaged_productid_fkey");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Exportedproduct", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Chickenbatch", "Chickenbatch")
                        .WithMany("Exportedproducts")
                        .HasForeignKey("Chickenbatchid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("exportedproduct_chickenbatchid_fkey");

                    b.HasOne("CFMS.Domain.Entities.Farm", "Farm")
                        .WithMany("Exportedproducts")
                        .HasForeignKey("Farmid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("exportedproduct_farmid_fkey");

                    b.HasOne("CFMS.Domain.Entities.Product", "Product")
                        .WithMany("Exportedproducts")
                        .HasForeignKey("Productid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("exportedproduct_productid_fkey");

                    b.Navigation("Chickenbatch");

                    b.Navigation("Farm");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Farm", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("Farms")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("farm_userid_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Flock", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Breed", "Breed")
                        .WithMany("Flocks")
                        .HasForeignKey("Breedid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_flock_breed");

                    b.HasOne("CFMS.Domain.Entities.Purpose", "Purpose")
                        .WithMany("Flocks")
                        .HasForeignKey("Purposeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_flock_purpose");

                    b.Navigation("Breed");

                    b.Navigation("Purpose");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Food", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Foods")
                        .HasForeignKey("Supplierid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("food_supplierid_fkey");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Harvesttask", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Task", "Task")
                        .WithMany("Harvesttasks")
                        .HasForeignKey("Taskid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("harvesttask_taskid_fkey");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Healthlog", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Flock", "Flock")
                        .WithMany("Healthlogs")
                        .HasForeignKey("Flockid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("healthlog_flockid_fkey");

                    b.Navigation("Flock");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Inventoryaudit", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Product", "Product")
                        .WithMany("Inventoryaudits")
                        .HasForeignKey("Productid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("inventoryaudit_productid_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("Inventoryaudits")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("inventoryaudit_userid_fkey");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Nutrition", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Feedschedule", "Feedschedule")
                        .WithMany("Nutritions")
                        .HasForeignKey("Feedscheduleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("nutrition_feedscheduleid_fkey");

                    b.HasOne("CFMS.Domain.Entities.Flock", "Flock")
                        .WithMany("Nutritions")
                        .HasForeignKey("Flockid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("nutrition_flockid_fkey");

                    b.HasOne("CFMS.Domain.Entities.Food", "Food")
                        .WithMany("Nutritions")
                        .HasForeignKey("Foodid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("nutrition_foodid_fkey");

                    b.HasOne("CFMS.Domain.Entities.Water", "Water")
                        .WithMany("Nutritions")
                        .HasForeignKey("Waterid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("nutrition_waterid_fkey");

                    b.Navigation("Feedschedule");

                    b.Navigation("Flock");

                    b.Navigation("Food");

                    b.Navigation("Water");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Performancestatistic", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("Performancestatistics")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("performancestatistic_userid_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Product", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("Supplierid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_supplierid_fkey");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Quantitylog", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Flock", "Flock")
                        .WithMany("Quantitylogs")
                        .HasForeignKey("Flockid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("quantitylog_flockid_fkey");

                    b.HasOne("CFMS.Domain.Entities.Reason", "Reason")
                        .WithMany("Quantitylogs")
                        .HasForeignKey("Reasonid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("quantitylog_reasonid_fkey");

                    b.Navigation("Flock");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Salary", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("Salaries")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("salary_userid_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Task", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("task_userid_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TimeKeeping", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.TimeKeepingType", "TimekeepingtypeNavigation")
                        .WithMany("TimeKeepings")
                        .HasForeignKey("Timekeepingtype")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("time_keeping_timekeepingtype_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("TimeKeepings")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("time_keeping_userid_fkey");

                    b.Navigation("TimekeepingtypeNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.User", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Roleid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_users_role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Vaccinationlog", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Flock", "Flock")
                        .WithMany("Vaccinationlogs")
                        .HasForeignKey("Flockid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("vaccinationlog_flockid_fkey");

                    b.HasOne("CFMS.Domain.Entities.Vaccine", "Vaccine")
                        .WithMany("Vaccinationlogs")
                        .HasForeignKey("Vaccineid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("vaccinationlog_vaccineid_fkey");

                    b.Navigation("Flock");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Vaccine", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Disease", "Disease")
                        .WithMany("Vaccines")
                        .HasForeignKey("Diseaseid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("vaccine_diseaseid_fkey");

                    b.HasOne("CFMS.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Vaccines")
                        .HasForeignKey("Supplierid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("vaccine_supplierid_fkey");

                    b.Navigation("Disease");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Water", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Water")
                        .HasForeignKey("Supplierid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("water_supplierid_fkey");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Workschedule", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Task", "Task")
                        .WithMany("Workschedules")
                        .HasForeignKey("Taskid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("workschedule_taskid_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("Workschedules")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("workschedule_userid_fkey");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserHealthLog", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Healthlog", null)
                        .WithMany()
                        .HasForeignKey("hLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserQuantityLog", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Quantitylog", null)
                        .WithMany()
                        .HasForeignKey("qLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserVaccineLog", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Vaccinationlog", null)
                        .WithMany()
                        .HasForeignKey("vLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Breadingarea", b =>
                {
                    b.Navigation("Breadingequipments");

                    b.Navigation("Chickenbatches");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Breed", b =>
                {
                    b.Navigation("Flocks");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Chickenbatch", b =>
                {
                    b.Navigation("Exportedproducts");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Disease", b =>
                {
                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Equipment", b =>
                {
                    b.Navigation("Breadingequipments");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Farm", b =>
                {
                    b.Navigation("Breadingareas");

                    b.Navigation("Exportedproducts");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Feedschedule", b =>
                {
                    b.Navigation("Nutritions");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Flock", b =>
                {
                    b.Navigation("Chickenbatches");

                    b.Navigation("Healthlogs");

                    b.Navigation("Nutritions");

                    b.Navigation("Quantitylogs");

                    b.Navigation("Vaccinationlogs");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Food", b =>
                {
                    b.Navigation("Nutritions");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Product", b =>
                {
                    b.Navigation("Expireddamageds");

                    b.Navigation("Exportedproducts");

                    b.Navigation("Inventoryaudits");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Purpose", b =>
                {
                    b.Navigation("Flocks");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Reason", b =>
                {
                    b.Navigation("Quantitylogs");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("Foods");

                    b.Navigation("Products");

                    b.Navigation("Vaccines");

                    b.Navigation("Water");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Task", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Dailytasks");

                    b.Navigation("Harvesttasks");

                    b.Navigation("Workschedules");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TimeKeepingType", b =>
                {
                    b.Navigation("TimeKeepings");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.User", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Farms");

                    b.Navigation("Inventoryaudits");

                    b.Navigation("Performancestatistics");

                    b.Navigation("Salaries");

                    b.Navigation("Tasks");

                    b.Navigation("TimeKeepings");

                    b.Navigation("Workschedules");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Vaccine", b =>
                {
                    b.Navigation("Vaccinationlogs");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Water", b =>
                {
                    b.Navigation("Nutritions");
                });
#pragma warning restore 612, 618
        }
    }
}
