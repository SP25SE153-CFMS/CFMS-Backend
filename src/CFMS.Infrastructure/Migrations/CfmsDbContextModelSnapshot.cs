// <auto-generated />
using System;
using CFMS.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CFMS.Infrastructure.Migrations
{
    [DbContext(typeof(CfmsDbContext))]
    partial class CfmsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CFMS.Domain.Entities.Assignment", b =>
                {
                    b.Property<Guid>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("assignmentId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("assignedDate");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("completedDate");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeadlineDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deadlineDate");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("taskId");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("AssignmentId")
                        .HasName("Assignment_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Assignment", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Attendance", b =>
                {
                    b.Property<Guid>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("attendanceId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<TimeOnly?>("CheckIn")
                        .HasColumnType("time without time zone")
                        .HasColumnName("checkIn");

                    b.Property<TimeOnly?>("CheckOut")
                        .HasColumnType("time without time zone")
                        .HasColumnName("checkOut");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.Property<DateOnly?>("WorkDate")
                        .HasColumnType("date")
                        .HasColumnName("workDate");

                    b.HasKey("AttendanceId")
                        .HasName("Attendance_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Attendance", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.BreedingArea", b =>
                {
                    b.Property<Guid>("BreedingAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("breedingAreaId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double?>("Area")
                        .HasColumnType("double precision");

                    b.Property<string>("BreedingAreaCode")
                        .HasColumnType("character varying")
                        .HasColumnName("breedingAreaCode");

                    b.Property<string>("BreedingAreaName")
                        .HasColumnType("character varying")
                        .HasColumnName("breedingAreaName");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farmId");

                    b.Property<string>("Image")
                        .HasColumnType("character varying")
                        .HasColumnName("image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MealsPerDay")
                        .HasColumnType("integer")
                        .HasColumnName("mealsPerDay");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.HasKey("BreedingAreaId")
                        .HasName("BreedingArea_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("FarmId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("BreedingArea", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("categoryId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CategoryCode")
                        .HasColumnType("character varying")
                        .HasColumnName("categoryCode");

                    b.Property<int?>("CategoryType")
                        .HasColumnType("int")
                        .HasColumnName("categoryType");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("CategoryId")
                        .HasName("Category_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ChickenBatch", b =>
                {
                    b.Property<Guid>("ChickenBatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("chickenBatchId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("ChickenCoopId")
                        .HasColumnType("uuid")
                        .HasColumnName("chickenCoopId");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("endDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startDate");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("ChickenBatchId")
                        .HasName("ChickenBatch_pkey");

                    b.HasIndex("ChickenCoopId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("ChickenBatch", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ChickenCoop", b =>
                {
                    b.Property<Guid>("ChickenCoopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("chickenCoopId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int?>("Area")
                        .HasColumnType("integer")
                        .HasColumnName("area");

                    b.Property<Guid?>("BreedingAreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("breedingAreaId");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<string>("ChickenCoopCode")
                        .HasColumnType("character varying")
                        .HasColumnName("chickenCoopCode");

                    b.Property<string>("ChickenCoopName")
                        .HasColumnType("character varying")
                        .HasColumnName("chickenCoopName");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PurposeId")
                        .HasColumnType("uuid")
                        .HasColumnName("purposeId");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("ChickenCoopId")
                        .HasName("ChickenCoop_pkey");

                    b.HasIndex("BreedingAreaId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("PurposeId");

                    b.ToTable("ChickenCoop", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.CoopEquipment", b =>
                {
                    b.Property<Guid>("CoopEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("coopEquipmentId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("assignedDate");

                    b.Property<Guid?>("ChickenCoopId")
                        .HasColumnType("uuid")
                        .HasColumnName("chickenCoopId");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EquipmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("equipmentId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("MaintainDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("maintainDate");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("CoopEquipmentId")
                        .HasName("CoopEquipment_pkey");

                    b.HasIndex("ChickenCoopId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("CoopEquipment", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.DailyTask", b =>
                {
                    b.Property<Guid>("DTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("dTaskId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("itemId");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("TaskDate")
                        .HasColumnType("date")
                        .HasColumnName("taskDate");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("taskId");

                    b.HasKey("DTaskId")
                        .HasName("DailyTask_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("TaskId");

                    b.ToTable("DailyTask", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Equipment", b =>
                {
                    b.Property<Guid>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("equipmentId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double?>("Cost")
                        .HasColumnType("double precision")
                        .HasColumnName("cost");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("endDate");

                    b.Property<string>("EquipmentCode")
                        .HasColumnType("character varying")
                        .HasColumnName("equipmentCode");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("character varying")
                        .HasColumnName("equipmentName");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("productId");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("purchaseDate");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Specifications")
                        .HasColumnType("character varying")
                        .HasColumnName("specifications");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startDate");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int?>("WarrantyPeriod")
                        .HasColumnType("integer")
                        .HasColumnName("warrantyPeriod");

                    b.HasKey("EquipmentId")
                        .HasName("Equipment_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex(new[] { "ProductId" }, "Equipment_productId_key")
                        .IsUnique();

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Farm", b =>
                {
                    b.Property<Guid>("FarmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("farmId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .HasColumnType("character varying")
                        .HasColumnName("address");

                    b.Property<double?>("Area")
                        .HasColumnType("double precision")
                        .HasColumnName("area");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FarmCode")
                        .HasColumnType("character varying")
                        .HasColumnName("farmCode");

                    b.Property<string>("FarmImage")
                        .HasColumnType("character varying")
                        .HasColumnName("farmImage");

                    b.Property<string>("FarmName")
                        .HasColumnType("character varying")
                        .HasColumnName("farmName");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying")
                        .HasColumnName("phoneNumber");

                    b.Property<int?>("Scale")
                        .HasColumnType("integer")
                        .HasColumnName("scale");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Website")
                        .HasColumnType("character varying")
                        .HasColumnName("website");

                    b.HasKey("FarmId")
                        .HasName("Farm_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Farm", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.FarmEmployee", b =>
                {
                    b.Property<Guid>("FarmEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("farmEmployeeId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employeeId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("endDate");

                    b.Property<Guid?>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farmId");

                    b.Property<int?>("FarmRole")
                        .HasColumnType("int")
                        .HasColumnName("farmRole");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startDate");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("FarmEmployeeId")
                        .HasName("FarmEmployee_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FarmId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("FarmEmployee", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.FeedSchedule", b =>
                {
                    b.Property<Guid>("FeedScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("feedScheduleId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("FeedAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("feedAmount");

                    b.Property<DateTime?>("FeedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("feedTime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.HasKey("FeedScheduleId")
                        .HasName("FeedSchedule_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("FeedSchedule", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Flock", b =>
                {
                    b.Property<Guid>("FlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("flockId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double?>("AvgWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("avgWeight");

                    b.Property<Guid?>("BreedId")
                        .HasColumnType("uuid")
                        .HasColumnName("breedId");

                    b.Property<Guid?>("ChickenBatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("chickenBatchId");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("endDate");

                    b.Property<string>("Gender")
                        .HasColumnType("character varying")
                        .HasColumnName("gender");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastHealthCheck")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("lastHealthCheck");

                    b.Property<double?>("MortalityRate")
                        .HasColumnType("double precision")
                        .HasColumnName("mortalityRate");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<Guid?>("PurposeId")
                        .HasColumnType("uuid")
                        .HasColumnName("purposeId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startDate");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("FlockId")
                        .HasName("Flock_pkey");

                    b.HasIndex("BreedId");

                    b.HasIndex("ChickenBatchId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("PurposeId");

                    b.ToTable("Flock", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.FlockNutrition", b =>
                {
                    b.Property<Guid>("FlockNutritionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("flockNutritionId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("endDate");

                    b.Property<Guid?>("FlockId")
                        .HasColumnType("uuid")
                        .HasColumnName("flockId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("NutritionId")
                        .HasColumnType("uuid")
                        .HasColumnName("nutritionId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startDate");

                    b.HasKey("FlockNutritionId")
                        .HasName("FlockNutrition_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("FlockId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("NutritionId");

                    b.ToTable("FlockNutrition", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Food", b =>
                {
                    b.Property<Guid>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("foodId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiryDate");

                    b.Property<string>("Ingredients")
                        .HasColumnType("character varying")
                        .HasColumnName("ingredients");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("character varying")
                        .HasColumnName("notes");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("productId");

                    b.Property<DateTime?>("ProductionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("productionDate");

                    b.HasKey("FoodId")
                        .HasName("Food_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex(new[] { "ProductId" }, "Food_productId_key")
                        .IsUnique();

                    b.ToTable("Food", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HarvestDetail", b =>
                {
                    b.Property<Guid>("HarvestDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("harvestDetailId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("HarvestLogId")
                        .HasColumnType("uuid")
                        .HasColumnName("harvestLogId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("TypeProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("typeProductId");

                    b.HasKey("HarvestDetailId")
                        .HasName("HarvestDetail_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("HarvestLogId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("TypeProductId");

                    b.ToTable("HarvestDetail", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HarvestLog", b =>
                {
                    b.Property<Guid>("HarvestLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("harvestLogId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("ChickenCoopId")
                        .HasColumnType("uuid")
                        .HasColumnName("chickenCoopId");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int?>("Total")
                        .HasColumnType("integer")
                        .HasColumnName("total");

                    b.Property<string>("Type")
                        .HasColumnType("character varying")
                        .HasColumnName("type");

                    b.HasKey("HarvestLogId")
                        .HasName("HarvestLog_pkey");

                    b.HasIndex("ChickenCoopId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("HarvestLog", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HarvestProduct", b =>
                {
                    b.Property<Guid>("HarvestProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("harvestProductId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HarvestProductName")
                        .HasColumnType("character varying")
                        .HasColumnName("harvestProductName");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("productId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uuid")
                        .HasColumnName("unitId");

                    b.HasKey("HarvestProductId")
                        .HasName("HarvestProduct_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("UnitId");

                    b.HasIndex(new[] { "ProductId" }, "HarvestProduct_productId_key")
                        .IsUnique();

                    b.ToTable("HarvestProduct", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HarvestTask", b =>
                {
                    b.Property<Guid>("HTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("hTaskId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("HarvestDate")
                        .HasColumnType("date")
                        .HasColumnName("harvestDate");

                    b.Property<string>("HarvestType")
                        .HasColumnType("character varying")
                        .HasColumnName("harvestType");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("QuantityTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("quantityTypeId");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("taskId");

                    b.HasKey("HTaskId")
                        .HasName("HarvestTask_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("QuantityTypeId");

                    b.HasIndex("TaskId");

                    b.ToTable("HarvestTask", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HealthLog", b =>
                {
                    b.Property<Guid>("HLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("hLogId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("endDate");

                    b.Property<Guid?>("FlockId")
                        .HasColumnType("uuid")
                        .HasColumnName("flockId");

                    b.Property<double?>("Humidity")
                        .HasColumnType("double precision")
                        .HasColumnName("humidity");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasColumnType("character varying")
                        .HasColumnName("location");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staffId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startDate");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.HasKey("HLogId")
                        .HasName("HealthLog_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("FlockId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("HealthLog", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HealthLogDetail", b =>
                {
                    b.Property<Guid>("LogDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("logDetailId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CheckedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checkedAt");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CriteriaId")
                        .HasColumnType("uuid")
                        .HasColumnName("criteriaId");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("HLogId")
                        .HasColumnType("uuid")
                        .HasColumnName("hLogId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Result")
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LogDetailId")
                        .HasName("HealthLogDetail_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("HLogId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("HealthLogDetail", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("notificationId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("isRead");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NotificationName")
                        .HasColumnType("character varying")
                        .HasColumnName("notificationName");

                    b.Property<string>("Type")
                        .HasColumnType("character varying")
                        .HasColumnName("type");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("NotificationId")
                        .HasName("Notification_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Nutrition", b =>
                {
                    b.Property<Guid>("NutritionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("nutritionId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DevelopmentStage")
                        .HasColumnType("character varying")
                        .HasColumnName("developmentStage");

                    b.Property<Guid?>("FeedScheduleId")
                        .HasColumnType("uuid")
                        .HasColumnName("feedScheduleId");

                    b.Property<Guid?>("FoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("foodId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("TargetAudience")
                        .HasColumnType("character varying")
                        .HasColumnName("targetAudience");

                    b.HasKey("NutritionId")
                        .HasName("Nutrition_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("FeedScheduleId");

                    b.HasIndex("FoodId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("Nutrition", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Performance", b =>
                {
                    b.Property<Guid>("PerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("perId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int?>("CompletedTask")
                        .HasColumnType("integer")
                        .HasColumnName("completedTask");

                    b.Property<double?>("CompletionRate")
                        .HasColumnType("double precision")
                        .HasColumnName("completionRate");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DelayTask")
                        .HasColumnType("integer")
                        .HasColumnName("delayTask");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<double?>("PerformanceRating")
                        .HasColumnType("double precision")
                        .HasColumnName("performanceRating");

                    b.Property<string>("RangeTime")
                        .HasColumnType("character varying")
                        .HasColumnName("rangeTime");

                    b.Property<int?>("TotalTask")
                        .HasColumnType("integer")
                        .HasColumnName("totalTask");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("PerId")
                        .HasName("Performance_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Performance", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("productId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Package")
                        .HasColumnType("character varying")
                        .HasColumnName("package");

                    b.Property<Guid?>("ProductTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("productTypeId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Unit")
                        .HasColumnType("character varying")
                        .HasColumnName("unit");

                    b.Property<string>("Usage")
                        .HasColumnType("text")
                        .HasColumnName("usage");

                    b.HasKey("ProductId")
                        .HasName("Product_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.QuantityLog", b =>
                {
                    b.Property<Guid>("QLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("qLogId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FlockId")
                        .HasColumnType("uuid")
                        .HasColumnName("flockId");

                    b.Property<string>("Img")
                        .HasColumnType("character varying")
                        .HasColumnName("img");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LogDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("logDate");

                    b.Property<string>("LogType")
                        .HasColumnType("character varying")
                        .HasColumnName("logType");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("ReasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("reasonId");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("QLogId")
                        .HasName("QuantityLog_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("FlockId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("UserId");

                    b.ToTable("QuantityLog", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("requestId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approvedAt");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("approvedBy");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsEmergency")
                        .HasColumnType("boolean")
                        .HasColumnName("isEmergency");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RequestTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("requestTypeId");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("RequestId")
                        .HasName("Request_pkey");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.RequestDetail", b =>
                {
                    b.Property<Guid>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("detailId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ExpectedQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("expectedQuantity");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("itemId");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LocationFrom")
                        .HasColumnType("character varying")
                        .HasColumnName("locationFrom");

                    b.Property<string>("LocationTo")
                        .HasColumnType("character varying")
                        .HasColumnName("locationTo");

                    b.Property<int?>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("requestId");

                    b.HasKey("DetailId")
                        .HasName("RequestDetails_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestDetails");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.RevokedToken", b =>
                {
                    b.Property<Guid>("RevokedTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("revokedTokenId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiryDate");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revokedAt");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("token");

                    b.Property<int>("TokenType")
                        .HasColumnType("integer")
                        .HasColumnName("tokenType");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("RevokedTokenId")
                        .HasName("RevokedToken_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("RevokedToken", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Salary", b =>
                {
                    b.Property<Guid>("SalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("salaryId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double?>("BasicSalary")
                        .HasColumnType("double precision")
                        .HasColumnName("basicSalary");

                    b.Property<double?>("Bonus")
                        .HasColumnType("double precision")
                        .HasColumnName("bonus");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Deduction")
                        .HasColumnType("double precision")
                        .HasColumnName("deduction");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Final")
                        .HasColumnType("double precision")
                        .HasColumnName("final");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OverTimeHours")
                        .HasColumnType("integer")
                        .HasColumnName("overTimeHours");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int?>("TotalHoursWorked")
                        .HasColumnType("integer")
                        .HasColumnName("totalHoursWorked");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("SalaryId")
                        .HasName("Salary_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Salary", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.StockReceipt", b =>
                {
                    b.Property<Guid>("StockRepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("stockRepId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int?>("ActualQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("actualQuantity");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DetailId")
                        .HasColumnType("uuid")
                        .HasColumnName("detailId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemType")
                        .HasColumnType("character varying")
                        .HasColumnName("itemType");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LocationFrom")
                        .HasColumnType("character varying")
                        .HasColumnName("locationFrom");

                    b.Property<string>("LocationTo")
                        .HasColumnType("character varying")
                        .HasColumnName("locationTo");

                    b.Property<string>("StockReceiptType")
                        .HasColumnType("character varying")
                        .HasColumnName("stockReceiptType");

                    b.HasKey("StockRepId")
                        .HasName("StockReceipt_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DetailId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("StockReceipt", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.SubCategory", b =>
                {
                    b.Property<Guid>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("subCategoryId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("categoryId");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdDate");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataType")
                        .HasColumnType("character varying")
                        .HasColumnName("dataType");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("SubCategoryName")
                        .HasColumnType("character varying")
                        .HasColumnName("subCategoryName");

                    b.HasKey("SubCategoryId")
                        .HasName("SubCategory_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("SubCategory", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Task", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("taskId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasColumnType("character varying")
                        .HasColumnName("location");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("TaskName")
                        .HasColumnType("character varying")
                        .HasColumnName("taskName");

                    b.Property<string>("TaskType")
                        .HasColumnType("character varying")
                        .HasColumnName("taskType");

                    b.HasKey("TaskId")
                        .HasName("Task_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("Task", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskDetail", b =>
                {
                    b.Property<Guid>("TaskDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("taskDetailId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("TaskLogId")
                        .HasColumnType("uuid")
                        .HasColumnName("taskLogId");

                    b.Property<Guid?>("TypeProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("typeProductId");

                    b.HasKey("TaskDetailId")
                        .HasName("TaskDetail_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("TaskLogId");

                    b.HasIndex("TypeProductId");

                    b.ToTable("TaskDetail", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskEvaluation", b =>
                {
                    b.Property<Guid>("TaskEvalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("taskEvalId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("categoryId");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("FailedCriteria")
                        .HasColumnType("integer")
                        .HasColumnName("failedCriteria");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OverallResult")
                        .HasColumnType("character varying")
                        .HasColumnName("overallResult");

                    b.Property<int?>("PassedCriteria")
                        .HasColumnType("integer")
                        .HasColumnName("passedCriteria");

                    b.Property<string>("StaffName")
                        .HasColumnType("character varying")
                        .HasColumnName("staffName");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("taskId");

                    b.Property<string>("TaskType")
                        .HasColumnType("character varying")
                        .HasColumnName("taskType");

                    b.Property<int?>("TotalCriteria")
                        .HasColumnType("integer")
                        .HasColumnName("totalCriteria");

                    b.HasKey("TaskEvalId")
                        .HasName("TaskEvaluation_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskEvaluation", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskLog", b =>
                {
                    b.Property<Guid>("TaskLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("taskLogId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("ChickenCoopId")
                        .HasColumnType("uuid")
                        .HasColumnName("chickenCoopId");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("endDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startDate");

                    b.Property<string>("Type")
                        .HasColumnType("character varying")
                        .HasColumnName("type");

                    b.HasKey("TaskLogId")
                        .HasName("TaskLog_pkey");

                    b.HasIndex("ChickenCoopId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("TaskLog", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("userId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasColumnType("character varying")
                        .HasColumnName("avatar");

                    b.Property<string>("Cccd")
                        .HasColumnType("character varying")
                        .HasColumnName("CCCD");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("createdDate");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("FullName")
                        .HasColumnType("character varying")
                        .HasColumnName("fullName");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("character varying")
                        .HasColumnName("hashedPassword");

                    b.Property<string>("Mail")
                        .HasColumnType("character varying")
                        .HasColumnName("mail");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying")
                        .HasColumnName("phoneNumber");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int?>("SystemRole")
                        .HasColumnType("int")
                        .HasColumnName("systemRole");

                    b.HasKey("UserId")
                        .HasName("User_pkey");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.VaccinationEmployee", b =>
                {
                    b.Property<Guid>("VaccinationEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("vaccinationEmployeeId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("Employee")
                        .HasColumnType("uuid")
                        .HasColumnName("employee");

                    b.Property<Guid?>("VaccinationLogId")
                        .HasColumnType("uuid")
                        .HasColumnName("vaccinationLogId");

                    b.HasKey("VaccinationEmployeeId")
                        .HasName("VaccinationEmployee_pkey");

                    b.HasIndex("Employee");

                    b.HasIndex("VaccinationLogId");

                    b.ToTable("VaccinationEmployee", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.VaccinationLog", b =>
                {
                    b.Property<Guid>("VLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("vLogId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Dosage")
                        .HasColumnType("character varying")
                        .HasColumnName("dosage");

                    b.Property<Guid?>("FlockId")
                        .HasColumnType("uuid")
                        .HasColumnName("flockId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Reaction")
                        .HasColumnType("text")
                        .HasColumnName("reaction");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid?>("VaccineId")
                        .HasColumnType("uuid")
                        .HasColumnName("vaccineId");

                    b.HasKey("VLogId")
                        .HasName("VaccinationLog_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("FlockId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("VaccineId");

                    b.ToTable("VaccinationLog", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Vaccine", b =>
                {
                    b.Property<Guid>("VaccineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("vaccineId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BatchNumber")
                        .HasColumnType("character varying")
                        .HasColumnName("batchNumber");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DiseaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("diseaseId");

                    b.Property<string>("Dosage")
                        .HasColumnType("character varying")
                        .HasColumnName("dosage");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiryDate");

                    b.Property<string>("Instructions")
                        .HasColumnType("text")
                        .HasColumnName("instructions");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("productId");

                    b.Property<DateTime?>("ProductionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("productionDate");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid")
                        .HasColumnName("supplierId");

                    b.HasKey("VaccineId")
                        .HasName("Vaccine_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("SupplierId");

                    b.HasIndex(new[] { "ProductId" }, "Vaccine_productId_key")
                        .IsUnique();

                    b.ToTable("Vaccine", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.WareTransaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("transactionId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LocationFrom")
                        .HasColumnType("uuid")
                        .HasColumnName("locationFrom");

                    b.Property<Guid?>("LocationTo")
                        .HasColumnType("uuid")
                        .HasColumnName("locationTo");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("productId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("transactionDate");

                    b.Property<string>("TransactionType")
                        .HasColumnType("character varying")
                        .HasColumnName("transactionType");

                    b.Property<Guid?>("WareId")
                        .HasColumnType("uuid")
                        .HasColumnName("wareId");

                    b.HasKey("TransactionId")
                        .HasName("WareTransaction_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WareId");

                    b.ToTable("WareTransaction", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("WareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("wareId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("FarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("farmId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("MaxCapacity")
                        .HasColumnType("double precision")
                        .HasColumnName("maxCapacity");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("totalQuantity");

                    b.Property<double?>("TotalWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("totalWeight");

                    b.Property<string>("WarehouseName")
                        .HasColumnType("character varying")
                        .HasColumnName("warehouseName");

                    b.HasKey("WareId")
                        .HasName("Warehouse_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("FarmId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("Warehouse", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.WarehousePermission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("permissionId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("GrantedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("grantedAt");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.Property<Guid?>("WareId")
                        .HasColumnType("uuid")
                        .HasColumnName("wareId");

                    b.HasKey("PermissionId")
                        .HasName("WarehousePermission_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex("WareId");

                    b.ToTable("WarehousePermission", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.WarehouseStock", b =>
                {
                    b.Property<Guid>("WareStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("wareStockId")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("productId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("WareId")
                        .HasColumnType("uuid")
                        .HasColumnName("wareId");

                    b.HasKey("WareStockId")
                        .HasName("WarehouseStock_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WareId");

                    b.ToTable("WarehouseStock", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Assignment", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Task", "Task")
                        .WithMany("Assignments")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("Assignment_taskId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("Assignments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Assignment_userId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Attendance", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("Attendances")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Attendance_userId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.BreedingArea", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Farm", "Farm")
                        .WithMany("BreedingAreas")
                        .HasForeignKey("FarmId")
                        .HasConstraintName("BreedingArea_farmId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Farm");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Category", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ChickenBatch", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.ChickenCoop", "ChickenCoop")
                        .WithMany("ChickenBatches")
                        .HasForeignKey("ChickenCoopId")
                        .HasConstraintName("ChickenBatch_chickenCoopId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChickenCoop");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ChickenCoop", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.BreedingArea", "BreedingArea")
                        .WithMany("ChickenCoops")
                        .HasForeignKey("BreedingAreaId")
                        .HasConstraintName("ChickenCoop_breedingAreaId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Purpose")
                        .WithMany("ChickenCoops")
                        .HasForeignKey("PurposeId")
                        .HasConstraintName("ChickenCoop_purposeId_fkey");

                    b.Navigation("BreedingArea");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Purpose");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.CoopEquipment", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.ChickenCoop", "ChickenCoop")
                        .WithMany("CoopEquipments")
                        .HasForeignKey("ChickenCoopId")
                        .HasConstraintName("CoopEquipment_chickenCoopId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Equipment", "Equipment")
                        .WithMany("CoopEquipments")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("CoopEquipment_equipmentId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChickenCoop");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Equipment");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.DailyTask", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Task", "Task")
                        .WithMany("DailyTasks")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("DailyTask_taskId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Equipment", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Farm", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", null)
                        .WithMany("Farms")
                        .HasForeignKey("UserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.FarmEmployee", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "Employee")
                        .WithMany("FarmEmployees")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FarmEmployee_employeeId_fkey");

                    b.HasOne("CFMS.Domain.Entities.Farm", "Farm")
                        .WithMany("FarmEmployees")
                        .HasForeignKey("FarmId")
                        .HasConstraintName("FarmEmployee_farmId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Employee");

                    b.Navigation("Farm");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.FeedSchedule", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Flock", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Breed")
                        .WithMany("FlockBreeds")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Flock_breedId_fkey");

                    b.HasOne("CFMS.Domain.Entities.ChickenBatch", "ChickenBatch")
                        .WithMany("Flocks")
                        .HasForeignKey("ChickenBatchId")
                        .HasConstraintName("Flock_chickenBatchId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Purpose")
                        .WithMany("FlockPurposes")
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Flock_purposeId_fkey");

                    b.Navigation("Breed");

                    b.Navigation("ChickenBatch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Purpose");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.FlockNutrition", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Flock", "Flock")
                        .WithMany("FlockNutritions")
                        .HasForeignKey("FlockId")
                        .HasConstraintName("FlockNutrition_flockId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Nutrition", "Nutrition")
                        .WithMany("FlockNutritions")
                        .HasForeignKey("NutritionId")
                        .HasConstraintName("FlockNutrition_nutritionId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Flock");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Nutrition");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Food", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HarvestDetail", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.HarvestLog", "HarvestLog")
                        .WithMany("HarvestDetails")
                        .HasForeignKey("HarvestLogId")
                        .HasConstraintName("HarvestDetail_harvestLogId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "TypeProduct")
                        .WithMany("HarvestDetails")
                        .HasForeignKey("TypeProductId")
                        .HasConstraintName("HarvestDetail_typeProductId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("HarvestLog");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("TypeProduct");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HarvestLog", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.ChickenCoop", "ChickenCoop")
                        .WithMany("HarvestLogs")
                        .HasForeignKey("ChickenCoopId")
                        .HasConstraintName("HarvestLog_chickenCoopId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChickenCoop");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HarvestProduct", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Unit")
                        .WithMany("HarvestProducts")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("HarvestProduct_unitId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HarvestTask", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.HarvestProduct", "QuantityType")
                        .WithMany("HarvestTasks")
                        .HasForeignKey("QuantityTypeId")
                        .HasConstraintName("HarvestTask_quantityTypeId_fkey");

                    b.HasOne("CFMS.Domain.Entities.Task", "Task")
                        .WithMany("HarvestTasks")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("HarvestTask_taskId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("QuantityType");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HealthLog", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Flock", "Flock")
                        .WithMany("HealthLogs")
                        .HasForeignKey("FlockId")
                        .HasConstraintName("HealthLog_flockId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Flock");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HealthLogDetail", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Criteria")
                        .WithMany("HealthLogDetails")
                        .HasForeignKey("CriteriaId")
                        .HasConstraintName("HealthLogDetail_criteriaId_fkey");

                    b.HasOne("CFMS.Domain.Entities.HealthLog", "HLog")
                        .WithMany("HealthLogDetails")
                        .HasForeignKey("HLogId")
                        .HasConstraintName("HealthLogDetail_hLogId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", null)
                        .WithMany("HealthLogDetails")
                        .HasForeignKey("UserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Criteria");

                    b.Navigation("HLog");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Notification", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Notification_userId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Nutrition", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.FeedSchedule", "FeedSchedule")
                        .WithMany("Nutritions")
                        .HasForeignKey("FeedScheduleId")
                        .HasConstraintName("Nutrition_feedScheduleId_fkey");

                    b.HasOne("CFMS.Domain.Entities.Food", "Food")
                        .WithMany("Nutritions")
                        .HasForeignKey("FoodId")
                        .HasConstraintName("Nutrition_foodId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("FeedSchedule");

                    b.Navigation("Food");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Performance", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("Performances")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Performance_userId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Product", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Equipment", "ProductNavigation")
                        .WithOne("Product")
                        .HasForeignKey("CFMS.Domain.Entities.Product", "ProductId")
                        .HasPrincipalKey("CFMS.Domain.Entities.Equipment", "ProductId")
                        .IsRequired()
                        .HasConstraintName("Product_productId_fkey1");

                    b.HasOne("CFMS.Domain.Entities.Food", "Product1")
                        .WithOne("Product")
                        .HasForeignKey("CFMS.Domain.Entities.Product", "ProductId")
                        .HasPrincipalKey("CFMS.Domain.Entities.Food", "ProductId")
                        .IsRequired()
                        .HasConstraintName("Product_productId_fkey3");

                    b.HasOne("CFMS.Domain.Entities.HarvestProduct", "Product2")
                        .WithOne("Product")
                        .HasForeignKey("CFMS.Domain.Entities.Product", "ProductId")
                        .HasPrincipalKey("CFMS.Domain.Entities.HarvestProduct", "ProductId")
                        .IsRequired()
                        .HasConstraintName("Product_productId_fkey");

                    b.HasOne("CFMS.Domain.Entities.Vaccine", "Product3")
                        .WithOne("Product")
                        .HasForeignKey("CFMS.Domain.Entities.Product", "ProductId")
                        .HasPrincipalKey("CFMS.Domain.Entities.Vaccine", "ProductId")
                        .IsRequired()
                        .HasConstraintName("Product_productId_fkey2");

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .HasConstraintName("Product_productTypeId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Product1");

                    b.Navigation("Product2");

                    b.Navigation("Product3");

                    b.Navigation("ProductNavigation");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.QuantityLog", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Flock", "Flock")
                        .WithMany("QuantityLogs")
                        .HasForeignKey("FlockId")
                        .HasConstraintName("QuantityLog_flockId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Reason")
                        .WithMany("QuantityLogs")
                        .HasForeignKey("ReasonId")
                        .HasConstraintName("QuantityLog_reasonId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", null)
                        .WithMany("QuantityLogs")
                        .HasForeignKey("UserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Flock");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Request", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "ApprovedByNavigation")
                        .WithMany("RequestApprovedByNavigations")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Request_approvedBy_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "RequestType")
                        .WithMany("Requests")
                        .HasForeignKey("RequestTypeId")
                        .HasConstraintName("Request_requestTypeId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", null)
                        .WithMany("RequestCreatedByNavigations")
                        .HasForeignKey("UserId");

                    b.HasOne("CFMS.Domain.Entities.User", null)
                        .WithMany("RequestUsers")
                        .HasForeignKey("UserId1");

                    b.Navigation("ApprovedByNavigation");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.RequestDetail", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Request", "Request")
                        .WithMany("RequestDetails")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("RequestDetails_requestId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.RevokedToken", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("RevokedTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("RevokedToken_userId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Salary", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("Salaries")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Salary_userId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.StockReceipt", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.RequestDetail", "Detail")
                        .WithMany("StockReceipts")
                        .HasForeignKey("DetailId")
                        .HasConstraintName("StockReceipt_detailId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Detail");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.SubCategory", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("SubCategory_categoryId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Task", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskDetail", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.TaskLog", "TaskLog")
                        .WithMany("TaskDetails")
                        .HasForeignKey("TaskLogId")
                        .HasConstraintName("TaskDetail_taskLogId_fkey");

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "TypeProduct")
                        .WithMany("TaskDetails")
                        .HasForeignKey("TypeProductId")
                        .HasConstraintName("TaskDetail_typeProductId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("TaskLog");

                    b.Navigation("TypeProduct");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskEvaluation", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Category")
                        .WithMany("TaskEvaluations")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("TaskEvaluation_categoryId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Task", "Task")
                        .WithMany("TaskEvaluations")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("TaskEvaluation_taskId_fkey");

                    b.Navigation("Category");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskLog", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.ChickenCoop", "ChickenCoop")
                        .WithMany("TaskLogs")
                        .HasForeignKey("ChickenCoopId")
                        .HasConstraintName("TaskLog_chickenCoopId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChickenCoop");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.VaccinationEmployee", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "EmployeeNavigation")
                        .WithMany("VaccinationEmployees")
                        .HasForeignKey("Employee")
                        .HasConstraintName("VaccinationEmployee_employee_fkey");

                    b.HasOne("CFMS.Domain.Entities.VaccinationLog", "VaccinationLog")
                        .WithMany("VaccinationEmployees")
                        .HasForeignKey("VaccinationLogId")
                        .HasConstraintName("VaccinationEmployee_vaccinationLogId_fkey");

                    b.Navigation("EmployeeNavigation");

                    b.Navigation("VaccinationLog");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.VaccinationLog", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Flock", "Flock")
                        .WithMany("VaccinationLogs")
                        .HasForeignKey("FlockId")
                        .HasConstraintName("VaccinationLog_flockId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Vaccine", "Vaccine")
                        .WithMany("VaccinationLogs")
                        .HasForeignKey("VaccineId")
                        .HasConstraintName("VaccinationLog_vaccineId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Flock");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Vaccine", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Disease")
                        .WithMany("VaccineDiseases")
                        .HasForeignKey("DiseaseId")
                        .HasConstraintName("Vaccine_diseaseId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Supplier")
                        .WithMany("VaccineSuppliers")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("Vaccine_supplierId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Disease");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.WareTransaction", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Product", "Product")
                        .WithMany("WareTransactions")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("WareTransaction_productId_fkey");

                    b.HasOne("CFMS.Domain.Entities.Warehouse", "Ware")
                        .WithMany("WareTransactions")
                        .HasForeignKey("WareId")
                        .HasConstraintName("WareTransaction_wareId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Product");

                    b.Navigation("Ware");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Warehouse", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Farm", "Farm")
                        .WithMany("Warehouses")
                        .HasForeignKey("FarmId")
                        .HasConstraintName("Warehouse_farmId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Farm");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.WarehousePermission", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("WarehousePermissions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("WarehousePermission_userId_fkey");

                    b.HasOne("CFMS.Domain.Entities.Warehouse", "Ware")
                        .WithMany("WarehousePermissions")
                        .HasForeignKey("WareId")
                        .HasConstraintName("WarehousePermission_wareId_fkey");

                    b.Navigation("User");

                    b.Navigation("Ware");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.WarehouseStock", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Product", "Product")
                        .WithMany("WarehouseStocks")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("WarehouseStock_productId_fkey");

                    b.HasOne("CFMS.Domain.Entities.Warehouse", "Ware")
                        .WithMany("WarehouseStocks")
                        .HasForeignKey("WareId")
                        .HasConstraintName("WarehouseStock_wareId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Product");

                    b.Navigation("Ware");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.BreedingArea", b =>
                {
                    b.Navigation("ChickenCoops");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ChickenBatch", b =>
                {
                    b.Navigation("Flocks");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ChickenCoop", b =>
                {
                    b.Navigation("ChickenBatches");

                    b.Navigation("CoopEquipments");

                    b.Navigation("HarvestLogs");

                    b.Navigation("TaskLogs");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Equipment", b =>
                {
                    b.Navigation("CoopEquipments");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Farm", b =>
                {
                    b.Navigation("BreedingAreas");

                    b.Navigation("FarmEmployees");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.FeedSchedule", b =>
                {
                    b.Navigation("Nutritions");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Flock", b =>
                {
                    b.Navigation("FlockNutritions");

                    b.Navigation("HealthLogs");

                    b.Navigation("QuantityLogs");

                    b.Navigation("VaccinationLogs");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Food", b =>
                {
                    b.Navigation("Nutritions");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HarvestLog", b =>
                {
                    b.Navigation("HarvestDetails");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HarvestProduct", b =>
                {
                    b.Navigation("HarvestTasks");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HealthLog", b =>
                {
                    b.Navigation("HealthLogDetails");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Nutrition", b =>
                {
                    b.Navigation("FlockNutritions");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Product", b =>
                {
                    b.Navigation("WareTransactions");

                    b.Navigation("WarehouseStocks");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Request", b =>
                {
                    b.Navigation("RequestDetails");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.RequestDetail", b =>
                {
                    b.Navigation("StockReceipts");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.SubCategory", b =>
                {
                    b.Navigation("ChickenCoops");

                    b.Navigation("FlockBreeds");

                    b.Navigation("FlockPurposes");

                    b.Navigation("HarvestDetails");

                    b.Navigation("HarvestProducts");

                    b.Navigation("HealthLogDetails");

                    b.Navigation("Products");

                    b.Navigation("QuantityLogs");

                    b.Navigation("Requests");

                    b.Navigation("TaskDetails");

                    b.Navigation("TaskEvaluations");

                    b.Navigation("VaccineDiseases");

                    b.Navigation("VaccineSuppliers");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Task", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("DailyTasks");

                    b.Navigation("HarvestTasks");

                    b.Navigation("TaskEvaluations");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskLog", b =>
                {
                    b.Navigation("TaskDetails");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.User", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Attendances");

                    b.Navigation("FarmEmployees");

                    b.Navigation("Farms");

                    b.Navigation("HealthLogDetails");

                    b.Navigation("Notifications");

                    b.Navigation("Performances");

                    b.Navigation("QuantityLogs");

                    b.Navigation("RequestApprovedByNavigations");

                    b.Navigation("RequestCreatedByNavigations");

                    b.Navigation("RequestUsers");

                    b.Navigation("RevokedTokens");

                    b.Navigation("Salaries");

                    b.Navigation("VaccinationEmployees");

                    b.Navigation("WarehousePermissions");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.VaccinationLog", b =>
                {
                    b.Navigation("VaccinationEmployees");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Vaccine", b =>
                {
                    b.Navigation("Product");

                    b.Navigation("VaccinationLogs");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("WareTransactions");

                    b.Navigation("WarehousePermissions");

                    b.Navigation("WarehouseStocks");
                });
#pragma warning restore 612, 618
        }
    }
}
