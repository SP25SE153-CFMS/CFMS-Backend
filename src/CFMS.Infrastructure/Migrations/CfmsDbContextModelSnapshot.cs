// <auto-generated />
using System;
using CFMS.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CFMS.Infrastructure.Migrations
{
    [DbContext(typeof(CfmsDbContext))]
    partial class CfmsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CFMS.Domain.Entities.Assignment", b =>
                {
                    b.Property<Guid>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<Guid?>("AssignedToId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ShiftScheduleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TaskScheduleId")
                        .HasColumnType("uuid");

                    b.HasKey("AssignmentId")
                        .HasName("Assignment_pkey");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ShiftScheduleId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TaskScheduleId");

                    b.ToTable("Assignment", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.BreedingArea", b =>
                {
                    b.Property<Guid>("BreedingAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double?>("Area")
                        .HasColumnType("double precision");

                    b.Property<string>("BreedingAreaCode")
                        .HasColumnType("character varying");

                    b.Property<string>("BreedingAreaName")
                        .HasColumnType("character varying");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FarmId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("BreedingAreaId")
                        .HasName("BreedingArea_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("FarmId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("BreedingArea", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CategoryCode")
                        .HasColumnType("character varying");

                    b.Property<int?>("CategoryType")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.HasKey("CategoryId")
                        .HasName("Category_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Chicken", b =>
                {
                    b.Property<Guid>("ChickenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("ChickenBatchId")
                        .HasColumnType("uuid");

                    b.Property<string>("ChickenCode")
                        .HasColumnType("character varying");

                    b.Property<string>("ChickenName")
                        .HasColumnType("character varying");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PurposeId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("integer");

                    b.HasKey("ChickenId")
                        .HasName("Chicken_pkey");

                    b.HasIndex("ChickenBatchId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("PurposeId");

                    b.ToTable("Chicken", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ChickenBatch", b =>
                {
                    b.Property<Guid>("ChickenBatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ChickenBatchName")
                        .HasColumnType("character varying");

                    b.Property<Guid?>("ChickenCoopId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ChickenBatchId")
                        .HasName("ChickenBatch_pkey");

                    b.HasIndex("ChickenCoopId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("ChickenBatch", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ChickenCoop", b =>
                {
                    b.Property<Guid>("ChickenCoopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int?>("Area")
                        .HasColumnType("integer");

                    b.Property<Guid?>("BreedingAreaId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("ChickenCoopCode")
                        .HasColumnType("character varying");

                    b.Property<string>("ChickenCoopName")
                        .HasColumnType("character varying");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CurrentQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Density")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("ChickenCoopId")
                        .HasName("ChickenCoop_pkey");

                    b.HasIndex("BreedingAreaId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("ChickenCoop", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ChickenDetail", b =>
                {
                    b.Property<Guid>("ChickenDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("ChickenId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("ChickenDetailId")
                        .HasName("ChickenDetail_pkey");

                    b.HasIndex("ChickenId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("ChickenDetail", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.CoopEquipment", b =>
                {
                    b.Property<Guid>("CoopEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<Guid?>("ChickenCoopId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<int>("MaintenanceInterval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(30);

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("CoopEquipmentId")
                        .HasName("CoopEquipment_pkey");

                    b.HasIndex("ChickenCoopId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("CoopEquipment", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Equipment", b =>
                {
                    b.Property<Guid>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EquipmentCode")
                        .HasColumnType("character varying");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Material")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<double?>("Size")
                        .HasColumnType("double precision");

                    b.Property<string>("Usage")
                        .HasColumnType("character varying");

                    b.Property<int?>("Warranty")
                        .HasColumnType("integer");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("EquipmentId")
                        .HasName("Equipment_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.EvaluatedTarget", b =>
                {
                    b.Property<Guid>("EvaluatedTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("TargetId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TargetTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("EvaluatedTargetId")
                        .HasName("EvaluatedTarget_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("TargetId");

                    b.HasIndex("TargetTypeId");

                    b.ToTable("EvaluatedTarget", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.EvaluationResult", b =>
                {
                    b.Property<Guid>("EvaluationResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EvaluatedDate")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("EvaluatedDate ");

                    b.Property<Guid?>("EvaluatedTargetId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EvaluationTemplateId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EvaluationResultId")
                        .HasName("EvaluationResult_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EvaluatedTargetId");

                    b.HasIndex("EvaluationTemplateId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("EvaluationResult", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.EvaluationResultDetail", b =>
                {
                    b.Property<Guid>("EvaluationResultDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ActualValue")
                        .HasColumnType("character varying");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EvaluationResultId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("IsPass")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EvaluationResultDetailId")
                        .HasName("EvaluationResultDetail_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EvaluationResultId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("EvaluationResultDetail", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.EvaluationTemplate", b =>
                {
                    b.Property<Guid>("EvaluationTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TemplateName")
                        .HasColumnType("character varying");

                    b.Property<Guid?>("TemplateTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("EvaluationTemplateId")
                        .HasName("EvaluationTemplate_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("TemplateTypeId");

                    b.ToTable("EvaluationTemplate", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Farm", b =>
                {
                    b.Property<Guid>("FarmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .HasColumnType("character varying");

                    b.Property<double?>("Area")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FarmCode")
                        .HasColumnType("character varying");

                    b.Property<string>("FarmName")
                        .HasColumnType("character varying");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying");

                    b.Property<int?>("Scale")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasColumnType("character varying");

                    b.HasKey("FarmId")
                        .HasName("Farm_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("Farm", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.FarmEmployee", b =>
                {
                    b.Property<Guid>("FarmEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<Guid?>("FarmId")
                        .HasColumnType("uuid");

                    b.Property<int?>("FarmRole")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("FarmEmployeeId")
                        .HasName("FarmEmployee_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("FarmId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("FarmEmployee", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.FeedLog", b =>
                {
                    b.Property<Guid>("FeedLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal?>("ActualFeedAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ChickenBatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FeedingDate")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("FeedingDate  ");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("character varying");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("FeedLogId")
                        .HasName("FeedLog_pkey");

                    b.HasIndex("ChickenBatchId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UnitId");

                    b.ToTable("FeedLog", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.FeedSession", b =>
                {
                    b.Property<Guid>("FeedSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("FeedAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("FeedingTime")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("character varying");

                    b.Property<Guid?>("NutritionPlanId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("FeedSessionId")
                        .HasName("FeedSession_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("NutritionPlanId");

                    b.HasIndex("UnitId");

                    b.ToTable("FeedSession", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Food", b =>
                {
                    b.Property<Guid>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("FoodCode")
                        .HasColumnType("character varying");

                    b.Property<Guid?>("FoodIngredientId")
                        .HasColumnType("uuid");

                    b.Property<string>("FoodName")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("ProductionDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.HasKey("FoodId")
                        .HasName("Food_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("Food", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.GrowthBatch", b =>
                {
                    b.Property<Guid>("GrowthBatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal?>("AvgWeight")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ChickenBatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<decimal?>("FeedConsumption")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("GrowthStageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("MortalityRate")
                        .HasColumnType("numeric");

                    b.Property<string>("Note")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("GrowthBatchId")
                        .HasName("GrowthBatch_pkey");

                    b.HasIndex("ChickenBatchId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("GrowthStageId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("GrowthBatch", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.GrowthNutrition", b =>
                {
                    b.Property<Guid>("GrowthNutritionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("GrowthStageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("NutritionPlanId")
                        .HasColumnType("uuid");

                    b.HasKey("GrowthNutritionId")
                        .HasName("GrowthNutrition_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("GrowthStageId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("NutritionPlanId");

                    b.ToTable("GrowthNutrition", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.GrowthStage", b =>
                {
                    b.Property<Guid>("GrowthStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("ChickenType")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MaxAgeWeek")
                        .HasColumnType("integer");

                    b.Property<int?>("MinAgeWeek")
                        .HasColumnType("integer");

                    b.Property<string>("StageName")
                        .HasColumnType("character varying");

                    b.HasKey("GrowthStageId")
                        .HasName("GrowthStage_pkey");

                    b.HasIndex("ChickenType");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("GrowthStage", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HealthLog", b =>
                {
                    b.Property<Guid>("HealthLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CheckedAt")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<Guid?>("ChickenBatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasColumnType("character varying");

                    b.Property<string>("Notes")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("HealthLogId")
                        .HasName("HealthLog_pkey");

                    b.HasIndex("ChickenBatchId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("TaskId");

                    b.ToTable("HealthLog", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HealthLogDetail", b =>
                {
                    b.Property<Guid>("HealthLogDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CriteriaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("HealthLogId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Result")
                        .HasColumnType("character varying");

                    b.HasKey("HealthLogDetailId")
                        .HasName("HealthLogDetail_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("HealthLogId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("HealthLogDetail", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.InventoryReceipt", b =>
                {
                    b.Property<Guid>("InventoryReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("InventoryRequestId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReceiptTypeId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WareFromId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WareToId")
                        .HasColumnType("uuid");

                    b.HasKey("InventoryReceiptId")
                        .HasName("InventoryReceipt_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InventoryRequestId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ReceiptTypeId");

                    b.ToTable("InventoryReceipt", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.InventoryReceiptDetail", b =>
                {
                    b.Property<Guid>("InventoryReceiptDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<decimal?>("ActualQuantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("InventoryReceiptId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("character varying");

                    b.Property<string>("Reason")
                        .HasColumnType("character varying");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("InventoryReceiptDetailId")
                        .HasName("InventoryReceiptDetail_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InventoryReceiptId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("InventoryReceiptDetail", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.InventoryRequest", b =>
                {
                    b.Property<Guid>("InventoryRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("InventoryRequestTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WareFromId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WareToId")
                        .HasColumnType("uuid");

                    b.HasKey("InventoryRequestId")
                        .HasName("InventoryRequest_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InventoryRequestTypeId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("RequestId");

                    b.HasIndex("WareFromId");

                    b.HasIndex("WareToId");

                    b.ToTable("InventoryRequest", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.InventoryRequestDetail", b =>
                {
                    b.Property<Guid>("InventoryRequestDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpectedDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<decimal?>("ExpectedQuantity")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("InventoryRequestId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("character varying");

                    b.Property<string>("Reason")
                        .HasColumnType("character varying");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("InventoryRequestDetailId")
                        .HasName("InventoryRequestDetail_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InventoryRequestId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UnitId");

                    b.ToTable("InventoryRequestDetail", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Medicine", b =>
                {
                    b.Property<Guid>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DiseaseId")
                        .HasColumnType("uuid");

                    b.Property<string>("DosageForm")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProductionDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("StorageCondition")
                        .HasColumnType("character varying");

                    b.Property<string>("Usage")
                        .HasColumnType("character varying");

                    b.HasKey("MedicineId")
                        .HasName("Medicine_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("Medicine", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NotificationName")
                        .HasColumnType("character varying");

                    b.Property<Guid?>("NotificationType")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("NotificationId")
                        .HasName("Notification_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("NotificationType");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.NutritionPlan", b =>
                {
                    b.Property<Guid>("NutritionPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("Target")
                        .HasColumnType("character varying");

                    b.HasKey("NutritionPlanId")
                        .HasName("NutritionPlan_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("NutritionPlan", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.NutritionPlanDetail", b =>
                {
                    b.Property<Guid>("NutritionPlanDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal?>("ConsumptionRate")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FoodId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("FoodWeight")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("NutritionPlanId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("NutritionPlanDetailId")
                        .HasName("NutritionPlanDetail_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("FoodId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("NutritionPlanId");

                    b.HasIndex("UnitId");

                    b.ToTable("NutritionPlanDetail", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.QuantityLog", b =>
                {
                    b.Property<Guid>("QuantityLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("ChickenBatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Img")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LogDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<int?>("LogType")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("QuantityLogId")
                        .HasName("QuantityLog_pkey");

                    b.HasIndex("ChickenBatchId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("QuantityLog", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RequestTypeId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.HasKey("RequestId")
                        .HasName("Request_pkey");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Resource", b =>
                {
                    b.Property<Guid>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("PackageSize")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ResourceTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("ResourceId")
                        .HasName("Resource_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("PackageId");

                    b.HasIndex("ResourceTypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("Resource", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ResourceSupplier", b =>
                {
                    b.Property<Guid>("ResourceSupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PackagePriceId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("PackageSizePrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UnitPriceId")
                        .HasColumnType("uuid");

                    b.HasKey("ResourceSupplierId")
                        .HasName("ResourceSupplier_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("PackagePriceId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitPriceId");

                    b.ToTable("ResourceSupplier", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.RevokedToken", b =>
                {
                    b.Property<Guid>("RevokedTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("TokenType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RevokedTokenId")
                        .HasName("RevokedToken_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("RevokedToken", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Shift", b =>
                {
                    b.Property<Guid>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShiftName")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp(6) without time zone");

                    b.HasKey("ShiftId")
                        .HasName("Shift_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("Shift", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ShiftSchedule", b =>
                {
                    b.Property<Guid>("ShiftScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ShiftId")
                        .HasColumnType("uuid");

                    b.HasKey("ShiftScheduleId")
                        .HasName("ShiftSchedule_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ShiftId");

                    b.ToTable("ShiftSchedule", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.SubCategory", b =>
                {
                    b.Property<Guid>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataType")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubCategoryName")
                        .HasColumnType("character varying");

                    b.HasKey("SubCategoryId")
                        .HasName("SubCategory_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("SubCategory", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Task", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TaskName")
                        .HasColumnType("character varying");

                    b.Property<Guid?>("TaskTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId")
                        .HasName("Task_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("Task", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskHarvest", b =>
                {
                    b.Property<Guid>("TaskHarvestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("HarvestTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Quality")
                        .HasColumnType("character varying");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskHarvestId")
                        .HasName("TaskHarvest_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("HarvestTypeId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskHarvest", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskLocation", b =>
                {
                    b.Property<Guid>("TaskLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LocationTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskLocationId")
                        .HasName("TaskLocation_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("LocationTypeId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskLocation", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskLog", b =>
                {
                    b.Property<Guid>("TaskLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("ChickenCoopId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("character varying");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskLogId")
                        .HasName("TaskLog_pkey");

                    b.HasIndex("ChickenCoopId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskLog", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskRequest", b =>
                {
                    b.Property<Guid>("TaskRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TaskTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskRequestId")
                        .HasName("TaskRequest_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("RequestId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("TaskRequest", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskResource", b =>
                {
                    b.Property<Guid>("TaskResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResourceTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskResourceId")
                        .HasName("TaskResource_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ResourceTypeId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskResource", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskSchedule", b =>
                {
                    b.Property<Guid>("TaskScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Frequency")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastWorkDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<DateTime?>("NextWorkDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.HasKey("TaskScheduleId")
                        .HasName("TaskSchedule_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("TaskSchedule", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TemplateCriterion", b =>
                {
                    b.Property<Guid>("TemplateCriteriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CriteriaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EvaluationTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExpectedCondition")
                        .HasColumnType("character varying");

                    b.Property<string>("ExpectedUnit")
                        .HasColumnType("character varying");

                    b.Property<string>("ExpectedValue")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TemplateName")
                        .HasColumnType("character varying");

                    b.HasKey("TemplateCriteriaId")
                        .HasName("TemplateCriteria_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("EvaluationTemplateId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("TemplateCriteria");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Avatar")
                        .HasColumnType("character varying");

                    b.Property<string>("Cccd")
                        .HasColumnType("character varying")
                        .HasColumnName("CCCD");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .HasColumnType("character varying");

                    b.Property<string>("GoogleId")
                        .HasColumnType("character varying");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("character varying");

                    b.Property<string>("Mail")
                        .HasColumnType("character varying");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("SystemRole")
                        .HasColumnType("integer");

                    b.HasKey("UserId")
                        .HasName("User_pkey");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.VaccineLog", b =>
                {
                    b.Property<Guid>("VaccineLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("ChickenBatchId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("character varying");

                    b.Property<string>("Reaction")
                        .HasColumnType("character varying");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("VaccineLogId")
                        .HasName("VaccineLog_pkey");

                    b.HasIndex("ChickenBatchId");

                    b.HasIndex("TaskId");

                    b.ToTable("VaccineLog", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.WarePermission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("GrantedAt")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PermissionLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WareId")
                        .HasColumnType("uuid");

                    b.HasKey("PermissionId")
                        .HasName("WarePermission_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("WareId");

                    b.ToTable("WarePermission", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.WareStock", b =>
                {
                    b.Property<Guid>("WareStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WareId")
                        .HasColumnType("uuid");

                    b.HasKey("WareStockId")
                        .HasName("WareStock_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("WareId");

                    b.ToTable("WareStock", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.WareTransaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BatchNumber")
                        .HasColumnType("character varying");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LocationFromId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LocationToId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<Guid?>("TransactionType")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WareId")
                        .HasColumnType("uuid");

                    b.HasKey("TransactionId")
                        .HasName("WareTransaction_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("LocationFromId");

                    b.HasIndex("LocationToId");

                    b.HasIndex("TransactionType");

                    b.HasIndex("WareId");

                    b.ToTable("WareTransaction", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("WareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("CurrentCapacity")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("DeletedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("FarmId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastEditedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedWhen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("MaxCapacity")
                        .HasColumnType("double precision");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid?>("StorageTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("WarehouseName")
                        .HasColumnType("character varying");

                    b.HasKey("WareId")
                        .HasName("Warehouse_pkey");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("FarmId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("StorageTypeId");

                    b.ToTable("Warehouse", (string)null);
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Assignment", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "AssignedTo")
                        .WithMany("Assignments")
                        .HasForeignKey("AssignedToId")
                        .HasConstraintName("Assignment_AssignedToId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.ShiftSchedule", "ShiftSchedule")
                        .WithMany("Assignments")
                        .HasForeignKey("ShiftScheduleId")
                        .HasConstraintName("ShiftSchedule_ShiftScheduleId_fkey");

                    b.HasOne("CFMS.Domain.Entities.Task", "Task")
                        .WithMany("Assignments")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("Assignment_taskId_fkey");

                    b.HasOne("CFMS.Domain.Entities.TaskSchedule", "TaskSchedule")
                        .WithMany("Assignments")
                        .HasForeignKey("TaskScheduleId")
                        .HasConstraintName("TaskSchedule_ChickenBatchId_fkey");

                    b.Navigation("AssignedTo");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("ShiftSchedule");

                    b.Navigation("Task");

                    b.Navigation("TaskSchedule");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.BreedingArea", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Farm", "Farm")
                        .WithMany("BreedingAreas")
                        .HasForeignKey("FarmId")
                        .HasConstraintName("BreedingArea_FarmId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Farm");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Category", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Chicken", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.ChickenBatch", "ChickenBatch")
                        .WithMany("Chickens")
                        .HasForeignKey("ChickenBatchId")
                        .HasConstraintName("Chicken_ChickenId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Purpose")
                        .WithMany("Chickens")
                        .HasForeignKey("PurposeId")
                        .HasConstraintName("Chicken_PurposeId_fkey");

                    b.Navigation("ChickenBatch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Purpose");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ChickenBatch", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.ChickenCoop", "ChickenCoop")
                        .WithMany("ChickenBatches")
                        .HasForeignKey("ChickenCoopId")
                        .HasConstraintName("ChickenCoop_ChickenCoopId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChickenCoop");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ChickenCoop", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.BreedingArea", "BreedingArea")
                        .WithMany("ChickenCoops")
                        .HasForeignKey("BreedingAreaId")
                        .HasConstraintName("BreedingArea_BreedingAreaId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BreedingArea");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ChickenDetail", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Chicken", "Chicken")
                        .WithMany("ChickenDetails")
                        .HasForeignKey("ChickenId")
                        .HasConstraintName("Chicken_ChickenId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chicken");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.CoopEquipment", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.ChickenCoop", "ChickenCoop")
                        .WithMany("CoopEquipments")
                        .HasForeignKey("ChickenCoopId")
                        .HasConstraintName("CoopEquipment_ChickenCoopId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Equipment", "Equipment")
                        .WithMany("CoopEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Equipment_EquipmentId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChickenCoop");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Equipment");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Equipment", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Resource", "EquipmentNavigation")
                        .WithOne("Equipment")
                        .HasForeignKey("CFMS.Domain.Entities.Equipment", "EquipmentId")
                        .IsRequired()
                        .HasConstraintName("Equipment_EquipmentId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("EquipmentNavigation");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.EvaluatedTarget", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Chicken", "Target")
                        .WithMany("EvaluatedTargets")
                        .HasForeignKey("TargetId")
                        .HasConstraintName("EvaluatedTarget_TargetId_fkey1");

                    b.HasOne("CFMS.Domain.Entities.Task", "TargetNavigation")
                        .WithMany("EvaluatedTargets")
                        .HasForeignKey("TargetId")
                        .HasConstraintName("EvaluatedTarget_TargetId_fkey");

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "TargetType")
                        .WithMany("EvaluatedTargets")
                        .HasForeignKey("TargetTypeId")
                        .HasConstraintName("EvaluatedTarget_TargetTypeId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Target");

                    b.Navigation("TargetNavigation");

                    b.Navigation("TargetType");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.EvaluationResult", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.EvaluatedTarget", "EvaluatedTarget")
                        .WithMany("EvaluationResults")
                        .HasForeignKey("EvaluatedTargetId")
                        .HasConstraintName("EvaluationResult_EvaluatedTargetId_fkey");

                    b.HasOne("CFMS.Domain.Entities.EvaluationTemplate", "EvaluationTemplate")
                        .WithMany("EvaluationResults")
                        .HasForeignKey("EvaluationTemplateId")
                        .HasConstraintName("EvaluationResult_EvaluationTemplateId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("EvaluatedTarget");

                    b.Navigation("EvaluationTemplate");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.EvaluationResultDetail", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.EvaluationResult", "EvaluationResult")
                        .WithMany("EvaluationResultDetails")
                        .HasForeignKey("EvaluationResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("EvaluationResultDetail_EvaluationResultId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("EvaluationResult");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.EvaluationTemplate", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "TemplateType")
                        .WithMany("EvaluationTemplates")
                        .HasForeignKey("TemplateTypeId")
                        .HasConstraintName("EvaluationTemplate_TemplateTypeId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("TemplateType");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Farm", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.FarmEmployee", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Farm", "Farm")
                        .WithMany("FarmEmployees")
                        .HasForeignKey("FarmId")
                        .HasConstraintName("FarmEmployee_FarmId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("FarmEmployees")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FarmEmployee_UserId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Farm");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.FeedLog", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.ChickenBatch", "ChickenBatch")
                        .WithMany("FeedLogs")
                        .HasForeignKey("ChickenBatchId")
                        .HasConstraintName("FeedLog_ChickenBatchId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Task", "Task")
                        .WithMany("FeedLogs")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FeedLog_TaskId_fkey");

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Unit")
                        .WithMany("FeedLogs")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FeedLog_UnitId_fkey");

                    b.Navigation("ChickenBatch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Task");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.FeedSession", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.NutritionPlan", "NutritionPlan")
                        .WithMany("FeedSessions")
                        .HasForeignKey("NutritionPlanId")
                        .HasConstraintName("FeedSession_NutritionPlanId_fkey");

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Unit")
                        .WithMany("FeedSessions")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FeedSession_UnitId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("NutritionPlan");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Food", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Resource", "FoodNavigation")
                        .WithOne("Food")
                        .HasForeignKey("CFMS.Domain.Entities.Food", "FoodId")
                        .IsRequired()
                        .HasConstraintName("Food_FoodId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("FoodNavigation");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.GrowthBatch", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.ChickenBatch", "ChickenBatch")
                        .WithMany("GrowthBatches")
                        .HasForeignKey("ChickenBatchId")
                        .HasConstraintName("GrowthBatch_ChickenBatchId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.GrowthStage", "GrowthStage")
                        .WithMany("GrowthBatches")
                        .HasForeignKey("GrowthStageId")
                        .HasConstraintName("GrowthBatch_GrowthStageId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChickenBatch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("GrowthStage");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.GrowthNutrition", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.GrowthStage", "GrowthStage")
                        .WithMany("GrowthNutritions")
                        .HasForeignKey("GrowthStageId")
                        .HasConstraintName("GrowthNutrition_GrowthStageId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.NutritionPlan", "NutritionPlan")
                        .WithMany("GrowthNutritions")
                        .HasForeignKey("NutritionPlanId")
                        .HasConstraintName("GrowthNutrition_NutritionPlanId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("GrowthStage");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("NutritionPlan");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.GrowthStage", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.SubCategory", "ChickenTypeNavigation")
                        .WithMany("GrowthStages")
                        .HasForeignKey("ChickenType")
                        .HasConstraintName("GrowthStage_ChickenType_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChickenTypeNavigation");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HealthLog", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.ChickenBatch", "ChickenBatch")
                        .WithMany("HealthLogs")
                        .HasForeignKey("ChickenBatchId")
                        .HasConstraintName("HealthLog_ChickenBatchId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Task", "Task")
                        .WithMany("HealthLogs")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("HealthLog_TaskId_fkey");

                    b.Navigation("ChickenBatch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HealthLogDetail", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Criteria")
                        .WithMany("HealthLogDetails")
                        .HasForeignKey("CriteriaId")
                        .HasConstraintName("HealthLogDetail_CriteriaId_fkey");

                    b.HasOne("CFMS.Domain.Entities.HealthLog", "HealthLog")
                        .WithMany("HealthLogDetails")
                        .HasForeignKey("HealthLogId")
                        .HasConstraintName("HealthLogDetail_HealthLogId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Criteria");

                    b.Navigation("HealthLog");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.InventoryReceipt", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.InventoryRequest", "InventoryRequest")
                        .WithMany("InventoryReceipts")
                        .HasForeignKey("InventoryRequestId")
                        .HasConstraintName("InventoryReceipt_InventoryRequestId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "ReceiptType")
                        .WithMany("InventoryReceipts")
                        .HasForeignKey("ReceiptTypeId")
                        .HasConstraintName("InventoryReceipt_ReceiptTypeId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("InventoryRequest");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("ReceiptType");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.InventoryReceiptDetail", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.InventoryReceipt", "InventoryReceipt")
                        .WithMany("InventoryReceiptDetails")
                        .HasForeignKey("InventoryReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("InventoryReceiptDetail_InventoryReceiptId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("InventoryReceipt");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.InventoryRequest", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "InventoryRequestType")
                        .WithMany("InventoryRequests")
                        .HasForeignKey("InventoryRequestTypeId")
                        .HasConstraintName("InventoryRequest_InventoryRequestTypeId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Request", "Request")
                        .WithMany("InventoryRequests")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("InventoryRequest_RequestId_fkey");

                    b.HasOne("CFMS.Domain.Entities.Warehouse", "WareFrom")
                        .WithMany("InventoryRequestWareFroms")
                        .HasForeignKey("WareFromId")
                        .HasConstraintName("InventoryRequest_WareFromId_fkey");

                    b.HasOne("CFMS.Domain.Entities.Warehouse", "WareTo")
                        .WithMany("InventoryRequestWareTos")
                        .HasForeignKey("WareToId")
                        .HasConstraintName("InventoryRequest_WareToId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("InventoryRequestType");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Request");

                    b.Navigation("WareFrom");

                    b.Navigation("WareTo");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.InventoryRequestDetail", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.InventoryRequest", "InventoryRequest")
                        .WithMany("InventoryRequestDetails")
                        .HasForeignKey("InventoryRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("InventoryRequestDetail_InventoryRequestId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Resource", "Resource")
                        .WithMany("InventoryRequestDetails")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("InventoryRequestDetail_ResourceId_fkey");

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Unit")
                        .WithMany("InventoryRequestDetails")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("InventoryRequestDetail_UnitId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("InventoryRequest");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Resource");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Medicine", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Disease")
                        .WithMany("Medicines")
                        .HasForeignKey("DiseaseId")
                        .HasConstraintName("Medicine_DiseaseId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Resource", "MedicineNavigation")
                        .WithOne("Medicine")
                        .HasForeignKey("CFMS.Domain.Entities.Medicine", "MedicineId")
                        .IsRequired()
                        .HasConstraintName("Medicine_MedicineId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Disease");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("MedicineNavigation");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Notification", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "NotificationTypeNavigation")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationType")
                        .HasConstraintName("Notification_NotificationType_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Notification_UserId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("NotificationTypeNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.NutritionPlan", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.NutritionPlanDetail", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Food", "Food")
                        .WithMany("NutritionPlanDetails")
                        .HasForeignKey("FoodId")
                        .HasConstraintName("Food_FoodId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.NutritionPlan", "NutritionPlan")
                        .WithMany("NutritionPlanDetails")
                        .HasForeignKey("NutritionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("NutritionPlanDetail_NutritionPlanId_fkey");

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Unit")
                        .WithMany("NutritionPlanDetails")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("NutritionPlanDetail_UnitId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Food");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("NutritionPlan");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.QuantityLog", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.ChickenBatch", "ChickenBatch")
                        .WithMany("QuantityLogs")
                        .HasForeignKey("ChickenBatchId")
                        .HasConstraintName("QuantityLog_ChickenBatchId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChickenBatch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Request", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "ApprovedBy")
                        .WithMany("Requests")
                        .HasForeignKey("ApprovedById")
                        .HasConstraintName("Request_ApprovedById_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "RequestType")
                        .WithMany("Requests")
                        .HasForeignKey("RequestTypeId")
                        .HasConstraintName("Request_RequestTypeId_fkey");

                    b.Navigation("ApprovedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Resource", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Package")
                        .WithMany("ResourcePackages")
                        .HasForeignKey("PackageId")
                        .HasConstraintName("Resource_PackageId_fkey");

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "ResourceType")
                        .WithMany("ResourceResourceTypes")
                        .HasForeignKey("ResourceTypeId")
                        .HasConstraintName("Resource_ResourceTypeId_fkey");

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Unit")
                        .WithMany("ResourceUnits")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("Resource_UnitId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Package");

                    b.Navigation("ResourceType");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ResourceSupplier", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "PackagePrice")
                        .WithMany("ResourceSupplierPackagePrices")
                        .HasForeignKey("PackagePriceId")
                        .HasConstraintName("ResourceSupplier_PackagePriceId_fkey");

                    b.HasOne("CFMS.Domain.Entities.Resource", "Resource")
                        .WithMany("ResourceSuppliers")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("ResourceSupplier_ResourceId_fkey");

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Supplier")
                        .WithMany("ResourceSupplierSuppliers")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("ResourceSupplier_SupplierId_fkey");

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "UnitPrice")
                        .WithMany("ResourceSupplierUnitPrices")
                        .HasForeignKey("UnitPriceId")
                        .HasConstraintName("ResourceSupplier_UnitPriceId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("PackagePrice");

                    b.Navigation("Resource");

                    b.Navigation("Supplier");

                    b.Navigation("UnitPrice");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.RevokedToken", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("RevokedTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("RevokedToken_UserId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Shift", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ShiftSchedule", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Shift", "Shift")
                        .WithMany("ShiftSchedules")
                        .HasForeignKey("ShiftId")
                        .HasConstraintName("Shift_ShiftId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.SubCategory", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Category_CategoryId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Task", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "TaskType")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskTypeId")
                        .HasConstraintName("Task_TaskTypeId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskHarvest", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "HarvestType")
                        .WithMany("TaskHarvests")
                        .HasForeignKey("HarvestTypeId")
                        .HasConstraintName("TaskHarvest_HarvestTypeId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Task", "Task")
                        .WithMany("TaskHarvests")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TaskHarvest_TaskId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("HarvestType");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskLocation", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "LocationType")
                        .WithMany("TaskLocations")
                        .HasForeignKey("LocationTypeId")
                        .HasConstraintName("TaskLocation_LocationTypeId_fkey");

                    b.HasOne("CFMS.Domain.Entities.Task", "Task")
                        .WithMany("TaskLocations")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("TaskLocation_TaskId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("LocationType");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskLog", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.ChickenCoop", "ChickenCoop")
                        .WithMany("TaskLogs")
                        .HasForeignKey("ChickenCoopId")
                        .HasConstraintName("TaskLog_ChickenCoopId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Task", "Task")
                        .WithMany("TaskLogs")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("TaskLog_TaskId_fkey");

                    b.Navigation("ChickenCoop");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskRequest", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Request", "Request")
                        .WithMany("TaskRequests")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("TaskRequest_RequestId_fkey");

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "TaskType")
                        .WithMany("TaskRequests")
                        .HasForeignKey("TaskTypeId")
                        .HasConstraintName("TaskRequest_TaskTypeId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Request");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskResource", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "ResourceType")
                        .WithMany("TaskResources")
                        .HasForeignKey("ResourceTypeId")
                        .HasConstraintName("TaskResource_ResourceTypeId_fkey");

                    b.HasOne("CFMS.Domain.Entities.Task", "Task")
                        .WithMany("TaskResources")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TaskResource_TaskId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("ResourceType");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskSchedule", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TemplateCriterion", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "Criteria")
                        .WithMany("TemplateCriteria")
                        .HasForeignKey("CriteriaId")
                        .HasConstraintName("TemplateCriteria_CriteriaId_fkey");

                    b.HasOne("CFMS.Domain.Entities.EvaluationTemplate", "EvaluationTemplate")
                        .WithMany("TemplateCriteria")
                        .HasForeignKey("EvaluationTemplateId")
                        .HasConstraintName("TemplateCriteria_EvaluationTemplateId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Criteria");

                    b.Navigation("EvaluationTemplate");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.VaccineLog", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.ChickenBatch", "ChickenBatch")
                        .WithMany("VaccineLogs")
                        .HasForeignKey("ChickenBatchId")
                        .HasConstraintName("VaccineLog_ChickenBatchId_fkey");

                    b.HasOne("CFMS.Domain.Entities.Task", "Task")
                        .WithMany("VaccineLogs")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("VaccineLog_TaskId_fkey");

                    b.Navigation("ChickenBatch");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.WarePermission", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "User")
                        .WithMany("WarePermissions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("WarePermission_UserId_fkey");

                    b.HasOne("CFMS.Domain.Entities.Warehouse", "Ware")
                        .WithMany("WarePermissions")
                        .HasForeignKey("WareId")
                        .HasConstraintName("WarePermission_WareId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("User");

                    b.Navigation("Ware");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.WareStock", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Resource", "Resource")
                        .WithMany("WareStocks")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("WareStock_ResourceId_fkey");

                    b.HasOne("CFMS.Domain.Entities.Warehouse", "Ware")
                        .WithMany("WareStocks")
                        .HasForeignKey("WareId")
                        .HasConstraintName("WareStock_WareId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Resource");

                    b.Navigation("Ware");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.WareTransaction", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Warehouse", "LocationFrom")
                        .WithMany("WareTransactionLocationFroms")
                        .HasForeignKey("LocationFromId")
                        .HasConstraintName("WareTransaction_LocationFromId_fkey");

                    b.HasOne("CFMS.Domain.Entities.Warehouse", "LocationTo")
                        .WithMany("WareTransactionLocationTos")
                        .HasForeignKey("LocationToId")
                        .HasConstraintName("WareTransaction_LocationToId_fkey");

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "TransactionTypeNavigation")
                        .WithMany("WareTransactions")
                        .HasForeignKey("TransactionType")
                        .HasConstraintName("WareTransaction_TransactionType_fkey");

                    b.HasOne("CFMS.Domain.Entities.Warehouse", "Ware")
                        .WithMany("WareTransactionWares")
                        .HasForeignKey("WareId")
                        .HasConstraintName("WareTransaction_WareId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("LocationFrom");

                    b.Navigation("LocationTo");

                    b.Navigation("TransactionTypeNavigation");

                    b.Navigation("Ware");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Warehouse", b =>
                {
                    b.HasOne("CFMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.Farm", "Farm")
                        .WithMany("Warehouses")
                        .HasForeignKey("FarmId")
                        .HasConstraintName("Warehouse_FarmId_fkey");

                    b.HasOne("CFMS.Domain.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFMS.Domain.Entities.SubCategory", "StorageType")
                        .WithMany("Warehouses")
                        .HasForeignKey("StorageTypeId")
                        .HasConstraintName("Warehouse_StorageTypeId_fkey");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Farm");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("StorageType");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.BreedingArea", b =>
                {
                    b.Navigation("ChickenCoops");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Chicken", b =>
                {
                    b.Navigation("ChickenDetails");

                    b.Navigation("EvaluatedTargets");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ChickenBatch", b =>
                {
                    b.Navigation("Chickens");

                    b.Navigation("FeedLogs");

                    b.Navigation("GrowthBatches");

                    b.Navigation("HealthLogs");

                    b.Navigation("QuantityLogs");

                    b.Navigation("VaccineLogs");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ChickenCoop", b =>
                {
                    b.Navigation("ChickenBatches");

                    b.Navigation("CoopEquipments");

                    b.Navigation("TaskLogs");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Equipment", b =>
                {
                    b.Navigation("CoopEquipments");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.EvaluatedTarget", b =>
                {
                    b.Navigation("EvaluationResults");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.EvaluationResult", b =>
                {
                    b.Navigation("EvaluationResultDetails");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.EvaluationTemplate", b =>
                {
                    b.Navigation("EvaluationResults");

                    b.Navigation("TemplateCriteria");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Farm", b =>
                {
                    b.Navigation("BreedingAreas");

                    b.Navigation("FarmEmployees");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Food", b =>
                {
                    b.Navigation("NutritionPlanDetails");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.GrowthStage", b =>
                {
                    b.Navigation("GrowthBatches");

                    b.Navigation("GrowthNutritions");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.HealthLog", b =>
                {
                    b.Navigation("HealthLogDetails");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.InventoryReceipt", b =>
                {
                    b.Navigation("InventoryReceiptDetails");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.InventoryRequest", b =>
                {
                    b.Navigation("InventoryReceipts");

                    b.Navigation("InventoryRequestDetails");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.NutritionPlan", b =>
                {
                    b.Navigation("FeedSessions");

                    b.Navigation("GrowthNutritions");

                    b.Navigation("NutritionPlanDetails");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Request", b =>
                {
                    b.Navigation("InventoryRequests");

                    b.Navigation("TaskRequests");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Resource", b =>
                {
                    b.Navigation("Equipment");

                    b.Navigation("Food");

                    b.Navigation("InventoryRequestDetails");

                    b.Navigation("Medicine");

                    b.Navigation("ResourceSuppliers");

                    b.Navigation("WareStocks");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Shift", b =>
                {
                    b.Navigation("ShiftSchedules");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.ShiftSchedule", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.SubCategory", b =>
                {
                    b.Navigation("Chickens");

                    b.Navigation("EvaluatedTargets");

                    b.Navigation("EvaluationTemplates");

                    b.Navigation("FeedLogs");

                    b.Navigation("FeedSessions");

                    b.Navigation("GrowthStages");

                    b.Navigation("HealthLogDetails");

                    b.Navigation("InventoryReceipts");

                    b.Navigation("InventoryRequestDetails");

                    b.Navigation("InventoryRequests");

                    b.Navigation("Medicines");

                    b.Navigation("Notifications");

                    b.Navigation("NutritionPlanDetails");

                    b.Navigation("Requests");

                    b.Navigation("ResourcePackages");

                    b.Navigation("ResourceResourceTypes");

                    b.Navigation("ResourceSupplierPackagePrices");

                    b.Navigation("ResourceSupplierSuppliers");

                    b.Navigation("ResourceSupplierUnitPrices");

                    b.Navigation("ResourceUnits");

                    b.Navigation("TaskHarvests");

                    b.Navigation("TaskLocations");

                    b.Navigation("TaskRequests");

                    b.Navigation("TaskResources");

                    b.Navigation("Tasks");

                    b.Navigation("TemplateCriteria");

                    b.Navigation("WareTransactions");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Task", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("EvaluatedTargets");

                    b.Navigation("FeedLogs");

                    b.Navigation("HealthLogs");

                    b.Navigation("TaskHarvests");

                    b.Navigation("TaskLocations");

                    b.Navigation("TaskLogs");

                    b.Navigation("TaskResources");

                    b.Navigation("VaccineLogs");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.TaskSchedule", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.User", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("FarmEmployees");

                    b.Navigation("Notifications");

                    b.Navigation("Requests");

                    b.Navigation("RevokedTokens");

                    b.Navigation("WarePermissions");
                });

            modelBuilder.Entity("CFMS.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("InventoryRequestWareFroms");

                    b.Navigation("InventoryRequestWareTos");

                    b.Navigation("WarePermissions");

                    b.Navigation("WareStocks");

                    b.Navigation("WareTransactionLocationFroms");

                    b.Navigation("WareTransactionLocationTos");

                    b.Navigation("WareTransactionWares");
                });
#pragma warning restore 612, 618
        }
    }
}
